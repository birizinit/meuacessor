#!/usr/bin/env node

/**
 * Script de Diagn√≥stico do Sistema de Upload de Imagens
 * 
 * Este script verifica:
 * 1. Se o diret√≥rio public/uploads existe
 * 2. Se h√° imagens no diret√≥rio
 * 3. Se as vari√°veis de ambiente do Supabase est√£o configuradas
 * 4. Se o bucket do Supabase Storage existe e est√° acess√≠vel
 * 5. Se o banco de dados tem a coluna profile_image
 */

const fs = require('fs');
const path = require('path');

console.log('üîç DIAGN√ìSTICO DO SISTEMA DE UPLOAD DE IMAGENS\n');
console.log('=' .repeat(60));

// Teste 1: Verificar diret√≥rio local
console.log('\nüìÅ [1/5] Verificando diret√≥rio local de uploads...');
const uploadsDir = path.join(process.cwd(), 'public', 'uploads');
if (fs.existsSync(uploadsDir)) {
  console.log('‚úÖ Diret√≥rio existe:', uploadsDir);
  
  const files = fs.readdirSync(uploadsDir);
  console.log(`üìä Total de arquivos: ${files.length}`);
  
  if (files.length > 0) {
    console.log('üìÑ √öltimos 5 arquivos:');
    files.slice(-5).forEach(file => {
      const stats = fs.statSync(path.join(uploadsDir, file));
      const sizeInKB = (stats.size / 1024).toFixed(2);
      console.log(`   - ${file} (${sizeInKB} KB)`);
    });
  }
} else {
  console.log('‚ùå Diret√≥rio n√£o existe');
  console.log('üí° Ser√° criado automaticamente no primeiro upload');
}

// Teste 2: Verificar vari√°veis de ambiente
console.log('\nüîê [2/5] Verificando vari√°veis de ambiente...');
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (supabaseUrl) {
  console.log('‚úÖ NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl);
} else {
  console.log('‚ùå NEXT_PUBLIC_SUPABASE_URL: N√ÉO CONFIGURADA');
  console.log('üí° Configure no arquivo .env.local');
}

if (supabaseKey) {
  console.log('‚úÖ NEXT_PUBLIC_SUPABASE_ANON_KEY:', supabaseKey.substring(0, 20) + '...');
} else {
  console.log('‚ùå NEXT_PUBLIC_SUPABASE_ANON_KEY: N√ÉO CONFIGURADA');
  console.log('üí° Configure no arquivo .env.local');
}

// Teste 3: Verificar rota de upload
console.log('\nüì§ [3/5] Verificando rota de upload...');
const uploadRouteFile = path.join(process.cwd(), 'app', 'api', 'upload', 'route.ts');
if (fs.existsSync(uploadRouteFile)) {
  console.log('‚úÖ Rota de upload existe:', uploadRouteFile);
  
  const content = fs.readFileSync(uploadRouteFile, 'utf8');
  
  // Verificar se tem suporte ao Supabase Storage
  if (content.includes('supabase.storage.from(\'avatars\')')) {
    console.log('‚úÖ Suporte ao Supabase Storage: HABILITADO');
  } else {
    console.log('‚ö†Ô∏è Suporte ao Supabase Storage: N√ÉO ENCONTRADO');
  }
  
  // Verificar se tem fallback local
  if (content.includes('public/uploads')) {
    console.log('‚úÖ Fallback para storage local: HABILITADO');
  } else {
    console.log('‚ö†Ô∏è Fallback para storage local: N√ÉO ENCONTRADO');
  }
} else {
  console.log('‚ùå Rota de upload n√£o encontrada');
}

// Teste 4: Verificar rota de servir imagens
console.log('\nüñºÔ∏è [4/5] Verificando rota para servir imagens...');
const uploadsRouteFile = path.join(process.cwd(), 'app', 'api', 'uploads', '[filename]', 'route.ts');
if (fs.existsSync(uploadsRouteFile)) {
  console.log('‚úÖ Rota para servir imagens existe:', uploadsRouteFile);
} else {
  console.log('‚ùå Rota para servir imagens n√£o encontrada');
  console.log('üí° Crie o arquivo: app/api/uploads/[filename]/route.ts');
}

// Teste 5: Verificar configura√ß√£o do Next.js
console.log('\n‚öôÔ∏è [5/5] Verificando configura√ß√£o do Next.js...');
const nextConfigFile = path.join(process.cwd(), 'next.config.mjs');
if (fs.existsSync(nextConfigFile)) {
  console.log('‚úÖ next.config.mjs existe');
  
  const content = fs.readFileSync(nextConfigFile, 'utf8');
  
  if (content.includes('remotePatterns')) {
    console.log('‚úÖ Configura√ß√£o de imagens externas (remotePatterns): CONFIGURADA');
  } else {
    console.log('‚ö†Ô∏è Configura√ß√£o de imagens externas: N√ÉO ENCONTRADA');
    console.log('üí° Adicione remotePatterns para suportar imagens do Supabase');
  }
  
  if (content.includes('unoptimized')) {
    console.log('‚úÖ Otimiza√ß√£o de imagens: DESABILITADA (bom para imagens externas)');
  }
} else {
  console.log('‚ùå next.config.mjs n√£o encontrado');
}

// Resumo
console.log('\n' + '='.repeat(60));
console.log('üìä RESUMO DO DIAGN√ìSTICO\n');

const hasUploadRoute = fs.existsSync(uploadRouteFile);
const hasUploadsDir = fs.existsSync(uploadsDir);
const hasSupabaseConfig = supabaseUrl && supabaseKey;

console.log('Status Geral:');
console.log(`  Sistema de Upload: ${hasUploadRoute ? '‚úÖ' : '‚ùå'}`);
console.log(`  Diret√≥rio Local: ${hasUploadsDir ? '‚úÖ' : '‚ö†Ô∏è'}`);
console.log(`  Configura√ß√£o Supabase: ${hasSupabaseConfig ? '‚úÖ' : '‚ùå'}`);

console.log('\nüéØ RECOMENDA√á√ïES:\n');

if (!hasSupabaseConfig) {
  console.log('1. Configure as vari√°veis do Supabase no arquivo .env.local:');
  console.log('   NEXT_PUBLIC_SUPABASE_URL=sua-url-aqui');
  console.log('   NEXT_PUBLIC_SUPABASE_ANON_KEY=sua-chave-aqui');
}

if (hasSupabaseConfig) {
  console.log('1. Crie o bucket "avatars" no Supabase Storage');
  console.log('2. Marque o bucket como P√öBLICO');
  console.log('3. Execute o SQL em setup-supabase-storage.sql');
}

console.log('\nüìö Para mais detalhes, consulte:');
console.log('   - INSTRUCOES_CONFIGURAR_SUPABASE_STORAGE.md');
console.log('   - RESUMO_CORRECOES_IMAGENS.md');
console.log('   - PERGUNTAS_DIAGNOSTICO_IMAGENS.md');

console.log('\n' + '='.repeat(60));
console.log('‚ú® Diagn√≥stico conclu√≠do!\n');
