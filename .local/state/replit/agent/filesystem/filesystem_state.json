{"file_contents":{"components/ui/sheet.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SheetPrimitive from '@radix-ui/react-dialog'\nimport { XIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {\n  return <SheetPrimitive.Root data-slot=\"sheet\" {...props} />\n}\n\nfunction SheetTrigger({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {\n  return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />\n}\n\nfunction SheetClose({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Close>) {\n  return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />\n}\n\nfunction SheetPortal({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Portal>) {\n  return <SheetPrimitive.Portal data-slot=\"sheet-portal\" {...props} />\n}\n\nfunction SheetOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {\n  return (\n    <SheetPrimitive.Overlay\n      data-slot=\"sheet-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SheetContent({\n  className,\n  children,\n  side = 'right',\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Content> & {\n  side?: 'top' | 'right' | 'bottom' | 'left'\n}) {\n  return (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        data-slot=\"sheet-content\"\n        className={cn(\n          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500',\n          side === 'right' &&\n            'data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm',\n          side === 'left' &&\n            'data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm',\n          side === 'top' &&\n            'data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b',\n          side === 'bottom' &&\n            'data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <SheetPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none\">\n          <XIcon className=\"size-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  )\n}\n\nfunction SheetHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sheet-header\"\n      className={cn('flex flex-col gap-1.5 p-4', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sheet-footer\"\n      className={cn('mt-auto flex flex-col gap-2 p-4', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Title>) {\n  return (\n    <SheetPrimitive.Title\n      data-slot=\"sheet-title\"\n      className={cn('text-foreground font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Description>) {\n  return (\n    <SheetPrimitive.Description\n      data-slot=\"sheet-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4092},"components/ui/form.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as LabelPrimitive from '@radix-ui/react-label'\nimport { Slot } from '@radix-ui/react-slot'\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useFormState,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from 'react-hook-form'\n\nimport { cn } from '@/lib/utils'\nimport { Label } from '@/components/ui/label'\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue,\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({ name: fieldContext.name })\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error('useFormField should be used within <FormField>')\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue,\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<'div'>) {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        data-slot=\"form-item\"\n        className={cn('grid gap-2', className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  )\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn('data-[error=true]:text-destructive', className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<'p'>) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<'p'>) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? '') : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn('text-destructive text-sm', className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":3761},"components/ui/sonner.tsx":{"content":"'use client'\n\nimport { useTheme } from 'next-themes'\nimport { Toaster as Sonner, ToasterProps } from 'sonner'\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = 'system' } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps['theme']}\n      className=\"toaster group\"\n      style={\n        {\n          '--normal-bg': 'var(--popover)',\n          '--normal-text': 'var(--popover-foreground)',\n          '--normal-border': 'var(--border)',\n        } as React.CSSProperties\n      }\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":564},"components/ui/field.tsx":{"content":"'use client'\n\nimport { useMemo } from 'react'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\nimport { Label } from '@/components/ui/label'\nimport { Separator } from '@/components/ui/separator'\n\nfunction FieldSet({ className, ...props }: React.ComponentProps<'fieldset'>) {\n  return (\n    <fieldset\n      data-slot=\"field-set\"\n      className={cn(\n        'flex flex-col gap-6',\n        'has-[>[data-slot=checkbox-group]]:gap-3 has-[>[data-slot=radio-group]]:gap-3',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction FieldLegend({\n  className,\n  variant = 'legend',\n  ...props\n}: React.ComponentProps<'legend'> & { variant?: 'legend' | 'label' }) {\n  return (\n    <legend\n      data-slot=\"field-legend\"\n      data-variant={variant}\n      className={cn(\n        'mb-3 font-medium',\n        'data-[variant=legend]:text-base',\n        'data-[variant=label]:text-sm',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction FieldGroup({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"field-group\"\n      className={cn(\n        'group/field-group @container/field-group flex w-full flex-col gap-7 data-[slot=checkbox-group]:gap-3 [&>[data-slot=field-group]]:gap-4',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nconst fieldVariants = cva(\n  'group/field flex w-full gap-3 data-[invalid=true]:text-destructive',\n  {\n    variants: {\n      orientation: {\n        vertical: ['flex-col [&>*]:w-full [&>.sr-only]:w-auto'],\n        horizontal: [\n          'flex-row items-center',\n          '[&>[data-slot=field-label]]:flex-auto',\n          'has-[>[data-slot=field-content]]:items-start has-[>[data-slot=field-content]]:[&>[role=checkbox],[role=radio]]:mt-px',\n        ],\n        responsive: [\n          'flex-col [&>*]:w-full [&>.sr-only]:w-auto @md/field-group:flex-row @md/field-group:items-center @md/field-group:[&>*]:w-auto',\n          '@md/field-group:[&>[data-slot=field-label]]:flex-auto',\n          '@md/field-group:has-[>[data-slot=field-content]]:items-start @md/field-group:has-[>[data-slot=field-content]]:[&>[role=checkbox],[role=radio]]:mt-px',\n        ],\n      },\n    },\n    defaultVariants: {\n      orientation: 'vertical',\n    },\n  },\n)\n\nfunction Field({\n  className,\n  orientation = 'vertical',\n  ...props\n}: React.ComponentProps<'div'> & VariantProps<typeof fieldVariants>) {\n  return (\n    <div\n      role=\"group\"\n      data-slot=\"field\"\n      data-orientation={orientation}\n      className={cn(fieldVariants({ orientation }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction FieldContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"field-content\"\n      className={cn(\n        'group/field-content flex flex-1 flex-col gap-1.5 leading-snug',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction FieldLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof Label>) {\n  return (\n    <Label\n      data-slot=\"field-label\"\n      className={cn(\n        'group/field-label peer/field-label flex w-fit gap-2 leading-snug group-data-[disabled=true]/field:opacity-50',\n        'has-[>[data-slot=field]]:w-full has-[>[data-slot=field]]:flex-col has-[>[data-slot=field]]:rounded-md has-[>[data-slot=field]]:border [&>*]:data-[slot=field]:p-4',\n        'has-data-[state=checked]:bg-primary/5 has-data-[state=checked]:border-primary dark:has-data-[state=checked]:bg-primary/10',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction FieldTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"field-label\"\n      className={cn(\n        'flex w-fit items-center gap-2 text-sm leading-snug font-medium group-data-[disabled=true]/field:opacity-50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction FieldDescription({ className, ...props }: React.ComponentProps<'p'>) {\n  return (\n    <p\n      data-slot=\"field-description\"\n      className={cn(\n        'text-muted-foreground text-sm leading-normal font-normal group-has-[[data-orientation=horizontal]]/field:text-balance',\n        'last:mt-0 nth-last-2:-mt-1 [[data-variant=legend]+&]:-mt-1.5',\n        '[&>a:hover]:text-primary [&>a]:underline [&>a]:underline-offset-4',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction FieldSeparator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<'div'> & {\n  children?: React.ReactNode\n}) {\n  return (\n    <div\n      data-slot=\"field-separator\"\n      data-content={!!children}\n      className={cn(\n        'relative -my-2 h-5 text-sm group-data-[variant=outline]/field-group:-mb-2',\n        className,\n      )}\n      {...props}\n    >\n      <Separator className=\"absolute inset-0 top-1/2\" />\n      {children && (\n        <span\n          className=\"bg-background text-muted-foreground relative mx-auto block w-fit px-2\"\n          data-slot=\"field-separator-content\"\n        >\n          {children}\n        </span>\n      )}\n    </div>\n  )\n}\n\nfunction FieldError({\n  className,\n  children,\n  errors,\n  ...props\n}: React.ComponentProps<'div'> & {\n  errors?: Array<{ message?: string } | undefined>\n}) {\n  const content = useMemo(() => {\n    if (children) {\n      return children\n    }\n\n    if (!errors) {\n      return null\n    }\n\n    if (errors.length === 1 && errors[0]?.message) {\n      return errors[0].message\n    }\n\n    return (\n      <ul className=\"ml-4 flex list-disc flex-col gap-1\">\n        {errors.map(\n          (error, index) =>\n            error?.message && <li key={index}>{error.message}</li>,\n        )}\n      </ul>\n    )\n  }, [children, errors])\n\n  if (!content) {\n    return null\n  }\n\n  return (\n    <div\n      role=\"alert\"\n      data-slot=\"field-error\"\n      className={cn('text-destructive text-sm font-normal', className)}\n      {...props}\n    >\n      {content}\n    </div>\n  )\n}\n\nexport {\n  Field,\n  FieldLabel,\n  FieldDescription,\n  FieldError,\n  FieldGroup,\n  FieldLegend,\n  FieldSeparator,\n  FieldSet,\n  FieldContent,\n  FieldTitle,\n}\n","size_bytes":6055},"components/ui/avatar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as AvatarPrimitive from '@radix-ui/react-avatar'\n\nimport { cn } from '@/lib/utils'\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        'relative flex size-8 shrink-0 overflow-hidden rounded-full',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn('aspect-square size-full', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        'bg-muted flex size-full items-center justify-center rounded-full',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1099},"components/ui/dropdown-menu.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\n          className,\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: 'default' | 'destructive'\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn('bg-border -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n","size_bytes":8432},"components/ui/textarea.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Textarea({ className, ...props }: React.ComponentProps<'textarea'>) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        'border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Textarea }\n","size_bytes":760},"components/ui/tooltip.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip'\n\nimport { cn } from '@/lib/utils'\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  )\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-foreground text-background animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-foreground fill-foreground z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1893},"components/ui/carousel.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from 'embla-carousel-react'\nimport { ArrowLeft, ArrowRight } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: 'horizontal' | 'vertical'\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error('useCarousel must be used within a <Carousel />')\n  }\n\n  return context\n}\n\nfunction Carousel({\n  orientation = 'horizontal',\n  opts,\n  setApi,\n  plugins,\n  className,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & CarouselProps) {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === 'horizontal' ? 'x' : 'y',\n    },\n    plugins,\n  )\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) return\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === 'ArrowLeft') {\n        event.preventDefault()\n        scrollPrev()\n      } else if (event.key === 'ArrowRight') {\n        event.preventDefault()\n        scrollNext()\n      }\n    },\n    [scrollPrev, scrollNext],\n  )\n\n  React.useEffect(() => {\n    if (!api || !setApi) return\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) return\n    onSelect(api)\n    api.on('reInit', onSelect)\n    api.on('select', onSelect)\n\n    return () => {\n      api?.off('select', onSelect)\n    }\n  }, [api, onSelect])\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation:\n          orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}\n    >\n      <div\n        onKeyDownCapture={handleKeyDown}\n        className={cn('relative', className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        data-slot=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  )\n}\n\nfunction CarouselContent({ className, ...props }: React.ComponentProps<'div'>) {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div\n      ref={carouselRef}\n      className=\"overflow-hidden\"\n      data-slot=\"carousel-content\"\n    >\n      <div\n        className={cn(\n          'flex',\n          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CarouselItem({ className, ...props }: React.ComponentProps<'div'>) {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      data-slot=\"carousel-item\"\n      className={cn(\n        'min-w-0 shrink-0 grow-0 basis-full',\n        orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CarouselPrevious({\n  className,\n  variant = 'outline',\n  size = 'icon',\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-previous\"\n      variant={variant}\n      size={size}\n      className={cn(\n        'absolute size-8 rounded-full',\n        orientation === 'horizontal'\n          ? 'top-1/2 -left-12 -translate-y-1/2'\n          : '-top-12 left-1/2 -translate-x-1/2 rotate-90',\n        className,\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n}\n\nfunction CarouselNext({\n  className,\n  variant = 'outline',\n  size = 'icon',\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-next\"\n      variant={variant}\n      size={size}\n      className={cn(\n        'absolute size-8 rounded-full',\n        orientation === 'horizontal'\n          ? 'top-1/2 -right-12 -translate-y-1/2'\n          : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\n        className,\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n}\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":5562},"components/balance-card.tsx":{"content":"\"use client\"\nimport { Card } from \"@/components/ui/card\"\nimport { AreaChart, Area, XAxis, YAxis, ResponsiveContainer, Tooltip } from \"recharts\"\nimport { useState, useEffect } from \"react\"\nimport { createApiClient } from \"@/lib/api\"\nimport { getMonthAbbreviation } from \"@/lib/date-utils\"\n\ninterface BalanceCardProps {\n  dateRange: { start: string; end: string }\n  selectedPeriod: \"week\" | \"month\" | \"today\"\n  currentMonth: string\n}\n\nexport function BalanceCard({ dateRange, selectedPeriod, currentMonth }: BalanceCardProps) {\n  const [chartData, setChartData] = useState<{ day: number; gain: number; loss: number; label: string }[]>([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    const fetchBalanceData = async () => {\n      const apiClient = createApiClient()\n      if (!apiClient) {\n        setError(\"API client não disponível. Faça login novamente.\")\n        return\n      }\n\n      setIsLoading(true)\n      setError(null)\n      try {\n        const response = await apiClient.getTrades(1, 100)\n\n        const [startDay, startMonth, startYear] = dateRange.start.split(\"/\").map(Number)\n        const [endDay, endMonth, endYear] = dateRange.end.split(\"/\").map(Number)\n        const startDate = new Date(startYear, startMonth - 1, startDay)\n        const endDate = new Date(endYear, endMonth - 1, endDay, 23, 59, 59)\n\n        const filteredTrades = response.data.filter((trade) => {\n          const tradeDate = new Date(trade.openTime)\n          return tradeDate >= startDate && tradeDate <= endDate\n        })\n\n        let data: { day: number; gain: number; loss: number; label: string }[] = []\n\n        if (selectedPeriod === \"month\") {\n          const weeklyData = new Map<number, { gain: number; loss: number }>()\n\n          filteredTrades.forEach((trade) => {\n            const tradeDate = new Date(trade.openTime)\n            const dayOfMonth = tradeDate.getDate()\n            const weekIndex = Math.floor((dayOfMonth - 1) / 7) + 1\n\n            const existing = weeklyData.get(weekIndex) || { gain: 0, loss: 0 }\n\n            if (trade.pnl > 0) {\n              existing.gain += trade.pnl\n            } else {\n              existing.loss += Math.abs(trade.pnl)\n            }\n\n            weeklyData.set(weekIndex, existing)\n          })\n\n          data = Array.from({ length: 4 }, (_, i) => {\n            const weekData = weeklyData.get(i + 1) || { gain: 0, loss: 0 }\n            return {\n              day: (i + 1) * 7,\n              gain: weekData.gain,\n              loss: weekData.loss,\n              label: `Sem ${i + 1}`,\n            }\n          })\n        } else if (selectedPeriod === \"week\") {\n          const dailyData = new Map<number, { gain: number; loss: number }>()\n\n          filteredTrades.forEach((trade) => {\n            const tradeDate = new Date(trade.openTime)\n            const dayOfWeek = tradeDate.getDay()\n\n            const existing = dailyData.get(dayOfWeek) || { gain: 0, loss: 0 }\n\n            if (trade.pnl > 0) {\n              existing.gain += trade.pnl\n            } else {\n              existing.loss += Math.abs(trade.pnl)\n            }\n\n            dailyData.set(dayOfWeek, existing)\n          })\n\n          const dayNames = [\"Dom\", \"Seg\", \"Ter\", \"Qua\", \"Qui\", \"Sex\", \"Sáb\"]\n          data = Array.from({ length: 7 }, (_, i) => {\n            const dayData = dailyData.get(i) || { gain: 0, loss: 0 }\n            return {\n              day: i,\n              gain: dayData.gain,\n              loss: dayData.loss,\n              label: dayNames[i],\n            }\n          })\n        } else {\n          const hourlyData = new Map<number, { gain: number; loss: number }>()\n\n          filteredTrades.forEach((trade) => {\n            const tradeDate = new Date(trade.openTime)\n            const hour = tradeDate.getHours()\n\n            const existing = hourlyData.get(hour) || { gain: 0, loss: 0 }\n\n            if (trade.pnl > 0) {\n              existing.gain += trade.pnl\n            } else {\n              existing.loss += Math.abs(trade.pnl)\n            }\n\n            hourlyData.set(hour, existing)\n          })\n\n          data = Array.from({ length: 24 }, (_, i) => {\n            const hourData = hourlyData.get(i) || { gain: 0, loss: 0 }\n            return {\n              day: i,\n              gain: hourData.gain,\n              loss: hourData.loss,\n              label: `${i}h`,\n            }\n          })\n        }\n\n        setChartData(data)\n      } catch (error) {\n        console.error(\"[v0] BalanceCard: Error fetching balance data:\", error)\n        setError(error instanceof Error ? error.message : \"Erro ao carregar dados\")\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    fetchBalanceData()\n  }, [dateRange, selectedPeriod])\n\n  const CustomDot = (props: any) => {\n    const { cx, cy, index, payload } = props\n\n    if (index === 0) return null\n\n    const currentValue = payload.gain\n    const previousValue = chartData[index - 1]?.gain\n\n    const isGain = currentValue > previousValue\n    const color = isGain ? \"#16c784\" : \"#f2474a\"\n\n    return (\n      <circle\n        cx={cx}\n        cy={cy}\n        r={5}\n        fill={color}\n        style={{\n          filter: `drop-shadow(0 0 4px ${color}) drop-shadow(0 0 8px ${color}) drop-shadow(0 0 12px ${color})`,\n        }}\n      />\n    )\n  }\n\n  const CustomTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload\n      const gainValue = data.gain\n      const lossValue = data.loss\n      const formattedGain = new Intl.NumberFormat(\"pt-BR\", {\n        style: \"currency\",\n        currency: \"BRL\",\n      }).format(gainValue)\n      const formattedLoss = new Intl.NumberFormat(\"pt-BR\", {\n        style: \"currency\",\n        currency: \"BRL\",\n      }).format(lossValue)\n\n      return (\n        <div className=\"bg-[#2a2a5a] border border-[#3a3a6a] rounded-lg p-3 shadow-lg\">\n          <p className=\"text-white text-sm font-semibold mb-2\">{data.label}</p>\n          <p className=\"text-[#16c784] text-sm font-bold\">Ganho: {formattedGain}</p>\n          <p className=\"text-[#f2474a] text-sm font-bold\">Perda: {formattedLoss}</p>\n        </div>\n      )\n    }\n    return null\n  }\n\n  return (\n    <Card className=\"bg-[#1d1d41] border-none rounded-[20px] p-6\">\n      <div className=\"flex flex-wrap justify-between items-center gap-4 mb-5\">\n        <h4 className=\"text-lg font-semibold text-white\">Balanço do período</h4>\n        <div className=\"flex gap-5\">\n          <span className=\"flex items-center gap-2 text-sm font-semibold text-white\">\n            <span className=\"w-3.5 h-3.5 rounded-full bg-[#16c784]\"></span>\n            Ganho\n          </span>\n          <span className=\"flex items-center gap-2 text-sm font-semibold text-white\">\n            <span className=\"w-3.5 h-3.5 rounded-full bg-[#f2474a]\"></span>\n            Perca\n          </span>\n        </div>\n        <p className=\"text-base text-[#8c89b4]\">\n          {dateRange.start.split(\"/\")[0]} de {getMonthAbbreviation(currentMonth)}. - {dateRange.end.split(\"/\")[0]} de{\" \"}\n          {getMonthAbbreviation(currentMonth)}\n        </p>\n      </div>\n\n      {isLoading ? (\n        <div className=\"text-center py-8 text-[#aeabd8]\">Carregando...</div>\n      ) : error ? (\n        <div className=\"text-center py-8 text-[#f2474a]\">{error}</div>\n      ) : chartData.length === 0 ? (\n        <div className=\"text-center py-8 text-[#aeabd8]\">Nenhum dado disponível para o período</div>\n      ) : (\n        <div className=\"relative w-full h-[320px] mt-5\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <AreaChart data={chartData} margin={{ top: 20, right: 30, left: 10, bottom: 20 }}>\n              <defs>\n                <linearGradient id=\"colorGain\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#16c784\" stopOpacity={0.3} />\n                  <stop offset=\"95%\" stopColor=\"#16c784\" stopOpacity={0} />\n                </linearGradient>\n              </defs>\n              <XAxis\n                dataKey=\"label\"\n                stroke=\"#8c89b4\"\n                tick={{ fill: \"#8c89b4\", fontSize: 12 }}\n                axisLine={false}\n                tickLine={false}\n              />\n              <YAxis\n                stroke=\"#8c89b4\"\n                tick={{ fill: \"#8c89b4\", fontSize: 12 }}\n                axisLine={false}\n                tickLine={false}\n                tickFormatter={(value) => `${value / 1000}K`}\n              />\n              <Tooltip content={<CustomTooltip />} cursor={false} />\n              <Area\n                type=\"monotone\"\n                dataKey=\"gain\"\n                stroke=\"#16c784\"\n                strokeWidth={3}\n                fill=\"url(#colorGain)\"\n                animationDuration={1000}\n                dot={<CustomDot />}\n                activeDot={{ r: 7, fill: \"#16c784\", stroke: \"#16c784\", strokeWidth: 2 }}\n              />\n            </AreaChart>\n          </ResponsiveContainer>\n        </div>\n      )}\n    </Card>\n  )\n}\n","size_bytes":9051},"hooks/use-mobile.ts":{"content":"import * as React from 'react'\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener('change', onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener('change', onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"app/perfil/page.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport Image from \"next/image\"\nimport { useEffect, useState, useRef } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { Header } from \"@/components/header\"\nimport { Input } from \"@/components/ui/input\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Button } from \"@/components/ui/button\"\nimport { Dialog, DialogContent, DialogTitle } from \"@/components/ui/dialog\"\nimport { MyBrokerAPI, type UserData } from \"@/lib/api\"\n\nexport default function PerfilPage() {\n  const router = useRouter()\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\n  const [profileImage, setProfileImage] = useState(\"/assets/Ellipse.svg\")\n  const fileInputRef = useRef<HTMLInputElement>(null)\n  const [apiToken, setApiToken] = useState(\"\")\n  const [showSuccessModal, setShowSuccessModal] = useState(false)\n  const [userData, setUserData] = useState<UserData | null>(null)\n  const [isLoadingUser, setIsLoadingUser] = useState(false)\n  const [apiError, setApiError] = useState<string | null>(null)\n  const [moderateProgress, setModerateProgress] = useState(44)\n  const [aggressiveProgress, setAggressiveProgress] = useState(0)\n\n  useEffect(() => {\n    const authStatus = localStorage.getItem(\"isAuthenticated\")\n    if (authStatus !== \"true\") {\n      router.push(\"/login\")\n    } else {\n      setIsAuthenticated(true)\n    }\n\n    const savedImage = localStorage.getItem(\"profileImage\")\n    if (savedImage) {\n      setProfileImage(savedImage)\n    }\n\n    const savedToken = localStorage.getItem(\"apiToken\")\n    if (savedToken) {\n      setApiToken(savedToken)\n      fetchUserData(savedToken)\n    }\n  }, [router])\n\n  const fetchUserData = async (token: string) => {\n    setIsLoadingUser(true)\n    setApiError(null)\n    try {\n      const api = new MyBrokerAPI(token)\n      const data = await api.getUserInfo()\n      setUserData(data)\n\n      calculateProgress(data)\n    } catch (error) {\n      console.error(\"[v0] Error fetching user data:\", error)\n      setApiError(error instanceof Error ? error.message : \"Failed to fetch user data\")\n    } finally {\n      setIsLoadingUser(false)\n    }\n  }\n\n  const calculateProgress = (data: UserData) => {\n    // This is a placeholder calculation - adjust based on your actual business logic\n    // For example, you might calculate based on number of trades, total investment, etc.\n\n    // Example: Calculate based on some user metrics\n    // For now, using placeholder values\n    const moderate = Math.min(Math.round(Math.random() * 100), 100)\n    const aggressive = Math.min(Math.round(Math.random() * 100), 100)\n\n    setModerateProgress(moderate)\n    setAggressiveProgress(aggressive)\n  }\n\n  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (file) {\n      const reader = new FileReader()\n      reader.onloadend = () => {\n        const imageUrl = reader.result as string\n        setProfileImage(imageUrl)\n        localStorage.setItem(\"profileImage\", imageUrl)\n      }\n      reader.readAsDataURL(file)\n    }\n  }\n\n  const handleConnect = async () => {\n    if (apiToken.trim()) {\n      localStorage.setItem(\"apiToken\", apiToken)\n      await fetchUserData(apiToken)\n      setShowSuccessModal(true)\n    }\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-[#141332] flex items-center justify-center\">\n        <div className=\"text-white\">Carregando...</div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#141332]\">\n      <Header />\n      <main className=\"pb-12\">\n        <div className=\"container mx-auto px-4 md:px-10 lg:px-[124px] max-w-[1920px]\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-[340px_1fr] gap-6\">\n            {/* Left Sidebar */}\n            <div className=\"space-y-6\">\n              {/* Profile Card */}\n              <div className=\"bg-[#1d1d41] border border-[rgba(174,171,216,0.25)] rounded-xl p-6\">\n                <h3 className=\"text-white font-semibold mb-6\">Perfil</h3>\n                <div className=\"flex flex-col items-center text-center\">\n                  <div className=\"relative mb-4\">\n                    <Image\n                      src={profileImage || \"/placeholder.svg\"}\n                      alt=\"Avatar\"\n                      width={80}\n                      height={80}\n                      className=\"rounded-full object-cover\"\n                    />\n                    <input\n                      ref={fileInputRef}\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleImageUpload}\n                      className=\"hidden\"\n                    />\n                    <button\n                      onClick={() => fileInputRef.current?.click()}\n                      className=\"absolute bottom-0 right-0 w-6 h-6 bg-[#7c3aed] rounded-full flex items-center justify-center hover:bg-[#6d28d9] transition-colors\"\n                    >\n                      <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                          d=\"M8.5 1.5L10.5 3.5L4 10H2V8L8.5 1.5Z\"\n                          stroke=\"white\"\n                          strokeWidth=\"1.5\"\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                        />\n                      </svg>\n                    </button>\n                  </div>\n                  <div className=\"text-white font-semibold text-lg\">{userData?.name || \"Pedro Fonseca\"}</div>\n                  <div className=\"text-[#aeabd8] text-sm\">{userData?.nickname || \"Conservador\"}</div>\n                  {userData && (\n                    <div className=\"mt-2 text-xs text-[#aeabd8]\">\n                      <div>ID: {userData.id.slice(0, 8)}...</div>\n                      <div className=\"mt-1\">\n                        {userData.active ? (\n                          <span className=\"text-[#16c784]\">✓ Ativo</span>\n                        ) : (\n                          <span className=\"text-[#f2474a]\">✗ Inativo</span>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Progress Card 1 */}\n              <div className=\"bg-[#1d1d41] border border-[rgba(174,171,216,0.25)] rounded-xl p-6\">\n                <div className=\"text-white font-medium mb-2\">Torne-se um operador moderado</div>\n                <div className=\"text-[#aeabd8] text-xs mb-4\">Continue operando pelo menos 3% da sua banca</div>\n                <div className=\"relative w-full h-2 bg-[#27264e] rounded-full overflow-hidden\">\n                  <div\n                    className=\"absolute top-0 left-0 h-full bg-gradient-to-r from-[#7c3aed] to-[#a78bfa] rounded-full transition-all duration-500\"\n                    style={{ width: `${moderateProgress}%` }}\n                  />\n                </div>\n                <p className=\"text-[#7c3aed] text-sm font-semibold mt-2\">{moderateProgress}%</p>\n              </div>\n\n              {/* Progress Card 2 */}\n              <div className=\"bg-[#1d1d41] border border-[rgba(174,171,216,0.25)] rounded-xl p-6\">\n                <div className=\"text-white font-medium mb-2\">Torne-se um operador arrojado</div>\n                <div className=\"text-[#aeabd8] text-xs mb-4\">Continue operando pelo menos 5% da sua banca</div>\n                <div className=\"relative w-full h-2 bg-[#27264e] rounded-full overflow-hidden\">\n                  <div\n                    className=\"absolute top-0 left-0 h-full bg-gradient-to-r from-[#7c3aed] to-[#a78bfa] rounded-full transition-all duration-500\"\n                    style={{ width: `${aggressiveProgress}%` }}\n                  />\n                </div>\n                <p className=\"text-[#7c3aed] text-sm font-semibold mt-2\">{aggressiveProgress}%</p>\n              </div>\n            </div>\n\n            {/* Right Side - Form */}\n            <div className=\"bg-[#1d1d41] border border-[rgba(174,171,216,0.25)] rounded-xl p-6\">\n              <h3 className=\"text-white font-semibold mb-6\">Dados</h3>\n              {apiError && (\n                <div className=\"mb-4 p-3 bg-[#f2474a]/10 border border-[#f2474a]/30 rounded-lg text-[#f2474a] text-sm\">\n                  {apiError}\n                </div>\n              )}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div>\n                  <label className=\"text-[#aeabd8] text-sm block mb-2\">E-mail</label>\n                  <Input\n                    placeholder=\"Digite\"\n                    defaultValue={userData?.email || \"\"}\n                    readOnly={!!userData}\n                    className=\"bg-[#141332] border-[#2a2959] text-white h-11\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-[#aeabd8] text-sm block mb-2\">Senha</label>\n                  <Input\n                    placeholder=\"Digite\"\n                    type=\"password\"\n                    className=\"bg-[#141332] border-[#2a2959] text-white h-11\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-[#aeabd8] text-sm block mb-2\">Nome</label>\n                  <Input\n                    placeholder=\"Digite\"\n                    defaultValue={userData?.name || \"\"}\n                    readOnly={!!userData}\n                    className=\"bg-[#141332] border-[#2a2959] text-white h-11\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-[#aeabd8] text-sm block mb-2\">Sobrenome</label>\n                  <Input placeholder=\"Digite\" className=\"bg-[#141332] border-[#2a2959] text-white h-11\" />\n                </div>\n                <div>\n                  <label className=\"text-[#aeabd8] text-sm block mb-2\">Apelido</label>\n                  <Input\n                    placeholder=\"Digite\"\n                    defaultValue={userData?.nickname || \"\"}\n                    readOnly={!!userData}\n                    className=\"bg-[#141332] border-[#2a2959] text-white h-11\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-[#aeabd8] text-sm block mb-2\">CPF</label>\n                  <Input placeholder=\"0\" className=\"bg-[#141332] border-[#2a2959] text-white h-11\" />\n                </div>\n                <div>\n                  <label className=\"text-[#aeabd8] text-sm block mb-2\">País</label>\n                  <Select defaultValue={userData?.country || \"\"}>\n                    <SelectTrigger className=\"bg-[#141332] border-[#2a2959] text-white h-11\">\n                      <SelectValue placeholder=\"Selecione\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-[#1d1d41] text-white border-[#2a2959]\">\n                      <SelectItem value=\"BR\">Brasil</SelectItem>\n                      <SelectItem value=\"US\">Estados Unidos</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-[#aeabd8] text-sm block mb-2\">Cidade</label>\n                  <Input placeholder=\"Digite\" className=\"bg-[#141332] border-[#2a2959] text-white h-11\" />\n                </div>\n                <div>\n                  <label className=\"text-[#aeabd8] text-sm block mb-2\">Telefone</label>\n                  <Input\n                    placeholder=\"(00) 0000-0000\"\n                    defaultValue={userData?.phone ? `(${userData.phoneCountryCode}) ${userData.phone}` : \"\"}\n                    readOnly={!!userData}\n                    className=\"bg-[#141332] border-[#2a2959] text-white h-11\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-[#aeabd8] text-sm block mb-2\">Sexo</label>\n                  <Select defaultValue=\"\">\n                    <SelectTrigger className=\"bg-[#141332] border-[#2a2959] text-white h-11\">\n                      <SelectValue placeholder=\"Selecione\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-[#1d1d41] text-white border-[#2a2959]\">\n                      <SelectItem value=\"m\">Masculino</SelectItem>\n                      <SelectItem value=\"f\">Feminino</SelectItem>\n                      <SelectItem value=\"o\">Outro</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-[#aeabd8] text-sm block mb-2\">Data de nascimento</label>\n                  <Input placeholder=\"00/00/0000\" className=\"bg-[#141332] border-[#2a2959] text-white h-11\" />\n                </div>\n                <div>\n                  <label className=\"text-[#aeabd8] text-sm block mb-2\">Idioma do sistema</label>\n                  <Select defaultValue={userData?.language || \"pt-br\"} disabled>\n                    <SelectTrigger className=\"bg-[#141332] border-[#2a2959] text-white h-11\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-[#1d1d41] text-white border-[#2a2959]\">\n                      <SelectItem value=\"ptBr\">Português - BR</SelectItem>\n                      <SelectItem value=\"pt-br\">Português - BR</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"md:col-span-2\">\n                  <label className=\"text-[#aeabd8] text-sm block mb-2\">API Token</label>\n                  <Input\n                    placeholder=\"Digite seu token da API\"\n                    value={apiToken}\n                    onChange={(e) => setApiToken(e.target.value)}\n                    className=\"bg-[#141332] border-[#2a2959] text-white h-11\"\n                  />\n                </div>\n                <div className=\"flex items-end\">\n                  <Button\n                    onClick={handleConnect}\n                    disabled={isLoadingUser}\n                    className=\"w-full h-11 bg-[#7c3aed] hover:bg-[#6d28d9] text-white font-medium disabled:opacity-50\"\n                  >\n                    {isLoadingUser ? \"Conectando...\" : \"Conectar\"}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Dialog open={showSuccessModal} onOpenChange={setShowSuccessModal}>\n        <DialogContent className=\"bg-[#1d1d41] border border-[rgba(174,171,216,0.25)] max-w-sm p-8\">\n          <DialogTitle className=\"sr-only\">Conta vinculada com sucesso</DialogTitle>\n          <div className=\"flex flex-col items-center text-center space-y-4\">\n            <div className=\"w-20 h-20 rounded-full border-2 border-white/20 flex items-center justify-center\">\n              <svg\n                width=\"40\"\n                height=\"40\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-white\"\n              >\n                <path\n                  d=\"M20 6L9 17L4 12\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                />\n              </svg>\n            </div>\n            <h3 className=\"text-white text-xl font-semibold\">Conta vinculada!</h3>\n            <p className=\"text-[#aeabd8] text-sm\">\n              Sua conta foi vinculada com sucesso. Agora você pode utilizar a API para sincronizar suas operações.\n            </p>\n            {userData && (\n              <div className=\"w-full bg-[#27264e] rounded-lg p-3 text-left\">\n                <p className=\"text-white text-sm font-semibold mb-1\">{userData.name}</p>\n                <p className=\"text-[#aeabd8] text-xs\">{userData.email}</p>\n                <p className=\"text-[#aeabd8] text-xs mt-1\">{userData.nickname}</p>\n              </div>\n            )}\n            <div className=\"flex gap-3 w-full pt-2\">\n              <Button\n                onClick={() => setShowSuccessModal(false)}\n                className=\"flex-1 h-11 bg-transparent border border-[#2a2959] hover:bg-[#2a2959] text-white\"\n              >\n                Fechar\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n","size_bytes":16517},"components/ui/switch.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SwitchPrimitive from '@radix-ui/react-switch'\n\nimport { cn } from '@/lib/utils'\n\nfunction Switch({\n  className,\n  ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n  return (\n    <SwitchPrimitive.Root\n      data-slot=\"switch\"\n      className={cn(\n        'peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <SwitchPrimitive.Thumb\n        data-slot=\"switch-thumb\"\n        className={\n          'bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0'\n        }\n      />\n    </SwitchPrimitive.Root>\n  )\n}\n\nexport { Switch }\n","size_bytes":1174},"components/ui/accordion.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as AccordionPrimitive from '@radix-ui/react-accordion'\nimport { ChevronDownIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Accordion({\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Root>) {\n  return <AccordionPrimitive.Root data-slot=\"accordion\" {...props} />\n}\n\nfunction AccordionItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn('border-b last:border-b-0', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AccordionTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(\n          'focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}\n\nfunction AccordionContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Content>) {\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-content\"\n      className=\"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm\"\n      {...props}\n    >\n      <div className={cn('pt-0 pb-4', className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  )\n}\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2054},"components/ui/drawer.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { Drawer as DrawerPrimitive } from 'vaul'\n\nimport { cn } from '@/lib/utils'\n\nfunction Drawer({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) {\n  return <DrawerPrimitive.Root data-slot=\"drawer\" {...props} />\n}\n\nfunction DrawerTrigger({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {\n  return <DrawerPrimitive.Trigger data-slot=\"drawer-trigger\" {...props} />\n}\n\nfunction DrawerPortal({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {\n  return <DrawerPrimitive.Portal data-slot=\"drawer-portal\" {...props} />\n}\n\nfunction DrawerClose({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Close>) {\n  return <DrawerPrimitive.Close data-slot=\"drawer-close\" {...props} />\n}\n\nfunction DrawerOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {\n  return (\n    <DrawerPrimitive.Overlay\n      data-slot=\"drawer-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Content>) {\n  return (\n    <DrawerPortal data-slot=\"drawer-portal\">\n      <DrawerOverlay />\n      <DrawerPrimitive.Content\n        data-slot=\"drawer-content\"\n        className={cn(\n          'group/drawer-content bg-background fixed z-50 flex h-auto flex-col',\n          'data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b',\n          'data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t',\n          'data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm',\n          'data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm',\n          className,\n        )}\n        {...props}\n      >\n        <div className=\"bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block\" />\n        {children}\n      </DrawerPrimitive.Content>\n    </DrawerPortal>\n  )\n}\n\nfunction DrawerHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"drawer-header\"\n      className={cn(\n        'flex flex-col gap-0.5 p-4 group-data-[vaul-drawer-direction=bottom]/drawer-content:text-center group-data-[vaul-drawer-direction=top]/drawer-content:text-center md:gap-1.5 md:text-left',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"drawer-footer\"\n      className={cn('mt-auto flex flex-col gap-2 p-4', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Title>) {\n  return (\n    <DrawerPrimitive.Title\n      data-slot=\"drawer-title\"\n      className={cn('text-foreground font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Description>) {\n  return (\n    <DrawerPrimitive.Description\n      data-slot=\"drawer-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":4258},"components/ui/pagination.tsx":{"content":"import * as React from 'react'\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  MoreHorizontalIcon,\n} from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\nimport { Button, buttonVariants } from '@/components/ui/button'\n\nfunction Pagination({ className, ...props }: React.ComponentProps<'nav'>) {\n  return (\n    <nav\n      role=\"navigation\"\n      aria-label=\"pagination\"\n      data-slot=\"pagination\"\n      className={cn('mx-auto flex w-full justify-center', className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationContent({\n  className,\n  ...props\n}: React.ComponentProps<'ul'>) {\n  return (\n    <ul\n      data-slot=\"pagination-content\"\n      className={cn('flex flex-row items-center gap-1', className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationItem({ ...props }: React.ComponentProps<'li'>) {\n  return <li data-slot=\"pagination-item\" {...props} />\n}\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<React.ComponentProps<typeof Button>, 'size'> &\n  React.ComponentProps<'a'>\n\nfunction PaginationLink({\n  className,\n  isActive,\n  size = 'icon',\n  ...props\n}: PaginationLinkProps) {\n  return (\n    <a\n      aria-current={isActive ? 'page' : undefined}\n      data-slot=\"pagination-link\"\n      data-active={isActive}\n      className={cn(\n        buttonVariants({\n          variant: isActive ? 'outline' : 'ghost',\n          size,\n        }),\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationPrevious({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to previous page\"\n      size=\"default\"\n      className={cn('gap-1 px-2.5 sm:pl-2.5', className)}\n      {...props}\n    >\n      <ChevronLeftIcon />\n      <span className=\"hidden sm:block\">Previous</span>\n    </PaginationLink>\n  )\n}\n\nfunction PaginationNext({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to next page\"\n      size=\"default\"\n      className={cn('gap-1 px-2.5 sm:pr-2.5', className)}\n      {...props}\n    >\n      <span className=\"hidden sm:block\">Next</span>\n      <ChevronRightIcon />\n    </PaginationLink>\n  )\n}\n\nfunction PaginationEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      aria-hidden\n      data-slot=\"pagination-ellipsis\"\n      className={cn('flex size-9 items-center justify-center', className)}\n      {...props}\n    >\n      <MoreHorizontalIcon className=\"size-4\" />\n      <span className=\"sr-only\">More pages</span>\n    </span>\n  )\n}\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2713},"API_INTEGRATION.md":{"content":"# MyBroker API Integration - Documentation\n\n## Overview\nThis project has been fully integrated with the MyBroker API. All components now fetch real data from the API endpoints.\n\n## API Client (`lib/api.ts`)\nThe API client provides a centralized way to interact with the MyBroker API.\n\n### Base URL\n\\`\\`\\`\nhttps://broker-api.mybroker.dev\n\\`\\`\\`\n\n### Authentication\nAll requests require an `api-token` header. The token is stored in localStorage and managed through the profile page.\n\n### Available Methods\n\n#### `getUserInfo()`\nFetches user information from `/token/users/me`\n- Returns: UserData object with id, email, name, nickname, country, language, phone, etc.\n\n#### `getTrades(page, pageSize)`\nFetches paginated trades from `/token/trades`\n- Parameters: page number and items per page\n- Returns: TradesResponse with pagination info and trade data\n\n#### `getTradeById(id)`\nFetches a specific trade by ID from `/token/trades/{id}`\n- Returns: Single Trade object\n\n#### `getWallets()`\nFetches user wallets from `/token/wallets`\n- Returns: Array of Wallet objects\n\n#### `openTrade(data)`\nOpens a new trade via `/token/trades/open`\n- Parameters: isDemo, closeType, direction, symbol, amount\n- Returns: Created Trade object\n\n## Integration Points\n\n### 1. Profile Page (`app/perfil/page.tsx`)\n**Functionality:**\n- User enters API token in the \"API Token\" field\n- Clicks \"Conectar\" button to authenticate\n- System fetches user data and populates profile fields automatically\n- Shows success modal with user information\n- Token is stored in localStorage for future requests\n\n**API Calls:**\n- `getUserInfo()` - Fetches and displays user data (email, name, nickname, country, phone, language)\n\n### 2. Operations Page (`app/operacoes/page.tsx`)\n**Functionality:**\n- Displays all user trades in a table format\n- Shows coin names (without USDT suffix) instead of icons\n- Filters: All, Positive, Negative operations\n- Pagination with configurable items per page\n- Export to CSV functionality\n\n**API Calls:**\n- `getTrades(1, 100)` - Fetches up to 100 trades\n- Converts Trade objects to Operation format for display\n\n**Data Displayed:**\n- Coin name (symbol without USDT)\n- Date and time of operation\n- Investment amount (aporte)\n- Profit/Loss result\n\n### 3. Home Dashboard Components\n\n#### Result Card (`components/result-card.tsx`)\n**Title:** \"Lucro do Mês\" (Monthly Profit)\n\n**Functionality:**\n- Calculates total profit for the current month\n- Shows percentage gain/loss relative to investment\n- Displays daily profit trend chart\n- Calculates 8% consortium fee\n\n**API Calls:**\n- `getTrades(1, 100)` - Filters trades by current month\n- Aggregates PNL (profit and loss) values\n\n#### Balance Card (`components/balance-card.tsx`)\n**Title:** \"Balanço do período\" (Period Balance)\n\n**Functionality:**\n- Shows weekly profit/loss trends over 1 month\n- Groups data in 7-day periods (4 weeks)\n- Displays gain vs loss comparison chart\n- Color-coded dots (green for gains, red for losses)\n\n**API Calls:**\n- `getTrades(1, 100)` - Groups trades by week\n- Separates positive (gain) and negative (loss) PNL\n\n**Calculation:**\n- Week 1: Days 1-7\n- Week 2: Days 8-14\n- Week 3: Days 15-21\n- Week 4: Days 22-28+\n\n#### Top Operations Card (`components/top-operations-card.tsx`)\n**Title:** \"Top operações\"\n\n**Functionality:**\n- Ranks coins by total profit\n- Shows top 4 performing coins\n- Displays entries count, total investment, and profit per coin\n- Gold medal display for top 3 positions\n\n**API Calls:**\n- `getTrades(1, 100)` - Aggregates data by symbol\n- Groups by coin name (removes USDT suffix)\n\n**Metrics Calculated:**\n- Entries: Number of trades per coin\n- Investment: Sum of all amounts per coin\n- Profit: Sum of all PNL per coin\n\n#### Projection Card (`components/projection-card.tsx`)\n**Title:** \"Projeção salva\"\n\n**Functionality:**\n- Shows saved projection calculations\n- Toggle between daily and monthly views\n- Displays win rate percentage and projected value\n\n**Note:** This component uses saved projection data, not live API data\n\n#### Calculator Card (`components/calculator-card.tsx`)\n**Title:** \"Calculadora de projeção\"\n\n**Functionality:**\n- Calculates investment based on bank value and risk profile\n- Risk profiles: Conservative (1%), Moderate (3%), Aggressive (5%)\n- Projects returns for day or month periods\n- Allows saving projections with calendar selection\n\n**Calculation Formula:**\n- **Daily Return:** `investment × 87% win rate × 60% payout`\n- **Monthly Return:** `daily return × 22 trading days`\n\n**Example:**\n- Bank: R$ 5,000\n- Risk: Conservative (1%) = R$ 50 investment\n- Daily: R$ 50 × 0.87 × 0.60 = R$ 26.10\n- Monthly: R$ 26.10 × 22 = R$ 574.20\n\n## Data Flow\n\n1. **User Authentication:**\n   - User enters API token in profile page\n   - Token stored in localStorage\n   - All subsequent API calls use this token\n\n2. **Data Fetching:**\n   - Components check for API token on mount\n   - If token exists, fetch data from API\n   - Display loading states during fetch\n   - Show error messages if API calls fail\n\n3. **Data Processing:**\n   - Raw trade data converted to display format\n   - Dates formatted to Brazilian locale (pt-BR)\n   - Currency formatted as BRL (R$)\n   - Symbols cleaned (remove USDT suffix)\n\n4. **Real-time Updates:**\n   - Components refetch data when dateRange changes\n   - All cards synchronized through shared dateRange prop\n   - Dashboard components communicate via props\n\n## Error Handling\n\nAll components include:\n- Loading states while fetching data\n- Error messages for failed API calls\n- Fallback UI when no data available\n- Token validation checks\n\n## Environment\n\n- **API Base URL:** `https://broker-api.mybroker.dev`\n- **Authentication:** API token stored in localStorage\n- **Storage Key:** `apiToken`\n\n## Testing the Integration\n\n1. Go to Profile page (`/perfil`)\n2. Enter your MyBroker API token\n3. Click \"Conectar\"\n4. Verify user data populates automatically\n5. Navigate to Operations page to see your trades\n6. Check Home dashboard for aggregated statistics\n\n## Notes\n\n- All monetary values are displayed in Brazilian Real (BRL)\n- Dates use Brazilian format (DD/MM/YYYY)\n- Win rate is set to 87% with 60% average payout\n- Trading days per month: 22\n- Coin names display without USDT suffix for cleaner UI\n","size_bytes":6250},"components/ui/aspect-ratio.tsx":{"content":"'use client'\n\nimport * as AspectRatioPrimitive from '@radix-ui/react-aspect-ratio'\n\nfunction AspectRatio({\n  ...props\n}: React.ComponentProps<typeof AspectRatioPrimitive.Root>) {\n  return <AspectRatioPrimitive.Root data-slot=\"aspect-ratio\" {...props} />\n}\n\nexport { AspectRatio }\n","size_bytes":280},"components/ui/slider.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SliderPrimitive from '@radix-ui/react-slider'\n\nimport { cn } from '@/lib/utils'\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  const _values = React.useMemo(\n    () =>\n      Array.isArray(value)\n        ? value\n        : Array.isArray(defaultValue)\n          ? defaultValue\n          : [min, max],\n    [value, defaultValue, min, max],\n  )\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        'relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col',\n        className,\n      )}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={\n          'bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5'\n        }\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={\n            'bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full'\n          }\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: _values.length }, (_, index) => (\n        <SliderPrimitive.Thumb\n          data-slot=\"slider-thumb\"\n          key={index}\n          className=\"border-primary ring-ring/50 block size-4 shrink-0 rounded-full border bg-white shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50\"\n        />\n      ))}\n    </SliderPrimitive.Root>\n  )\n}\n\nexport { Slider }\n","size_bytes":1990},"INTEGRACAO_COMPLETA.md":{"content":"# Integração Completa - MyBroker API\n\n## Resumo da Integração\n\nTodos os componentes do painel estão integrados com a API do MyBroker e funcionando corretamente.\n\n## Arquivos Principais\n\n### 1. lib/api.ts - Cliente da API\n\\`\\`\\`typescript\nconst API_BASE_URL = \"https://broker-api.mybroker.dev\"\n\nexport interface UserData {\n  id: string\n  tenantId: string\n  email: string\n  name: string\n  nickname: string\n  country: string\n  language: string\n  phone?: string\n  phoneCountryCode?: string\n  active: boolean\n  banned: boolean\n  emailVerified: boolean\n  lastLoginAt: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface Trade {\n  id: string\n  symbol: string\n  userId: string\n  amount: number\n  status: \"COMPLETED\" | \"CANCELLED\" | \"PENDING\" | \"OPEN\"\n  direction: \"BUY\" | \"SELL\"\n  pnl: number\n  result?: \"WON\" | \"LOST\" | \"PENDING\"\n  openPrice: number\n  closePrice: number\n  openTime: number\n  closeTime: number\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface TradesResponse {\n  currentPage: number\n  perPage: number\n  lastPage: number\n  nextPage: number | null\n  prevPage: number | null\n  pages: number\n  total: number\n  count: number\n  data: Trade[]\n}\n\nexport class MyBrokerAPI {\n  private apiToken: string\n\n  constructor(apiToken: string) {\n    this.apiToken = apiToken\n  }\n\n  private async request<T>(endpoint: string, options?: RequestInit): Promise<T> {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      ...options,\n      headers: {\n        \"api-token\": this.apiToken,\n        \"Content-Type\": \"application/json\",\n        ...options?.headers,\n      },\n    })\n\n    if (!response.ok) {\n      const error = await response.json().catch(() => ({ message: \"Unknown error\" }))\n      throw new Error(error.message || `API Error: ${response.status}`)\n    }\n\n    return response.json()\n  }\n\n  async getUserInfo(): Promise<UserData> {\n    return this.request<UserData>(\"/token/users/me\")\n  }\n\n  async getTrades(page = 1, pageSize = 10): Promise<TradesResponse> {\n    return this.request<TradesResponse>(`/token/trades?page=${page}&pageSize=${pageSize}`)\n  }\n\n  async getTradeById(id: string): Promise<Trade> {\n    return this.request<Trade>(`/token/trades/${id}`)\n  }\n\n  async getWallets(): Promise<Wallet[]> {\n    return this.request<Wallet[]>(\"/token/wallets\")\n  }\n\n  async openTrade(data: {\n    isDemo: boolean\n    closeType: string\n    direction: \"BUY\" | \"SELL\"\n    symbol: string\n    amount: number\n  }): Promise<Trade> {\n    return this.request<Trade>(\"/token/trades/open\", {\n      method: \"POST\",\n      body: JSON.stringify(data),\n    })\n  }\n}\n\nexport function getApiToken(): string | null {\n  if (typeof window === \"undefined\") return null\n  return localStorage.getItem(\"apiToken\")\n}\n\nexport function createApiClient(): MyBrokerAPI | null {\n  const token = getApiToken()\n  if (!token) return null\n  return new MyBrokerAPI(token)\n}\n\\`\\`\\`\n\n## Funcionalidades Implementadas\n\n### ✅ Página de Perfil (app/perfil/page.tsx)\n- Campo \"API Token\" para inserir o token\n- Botão \"Conectar\" que busca dados do usuário via `/token/users/me`\n- Preenchimento automático dos campos: email, nome, apelido, país, telefone, idioma\n- Modal de sucesso mostrando informações do usuário conectado\n- Indicador de status (Ativo/Inativo)\n\n### ✅ Página de Operações (app/operacoes/page.tsx)\n- Busca todas as operações via `/token/trades`\n- Exibe nome das moedas (sem ícones, apenas texto)\n- Remove sufixo \"USDT\" para exibição limpa\n- Mostra data, hora, aporte e resultado de cada operação\n- Filtros: Todas, Lucrativas, Não Lucrativas\n- Paginação funcional\n- Exportação para CSV\n\n### ✅ Home - Lucro do Mês (components/result-card.tsx)\n- Calcula o lucro total do mês atual\n- Busca trades do mês via API\n- Soma todos os PNL (profit and loss)\n- Calcula percentual de retorno sobre investimento\n- Gráfico de área mostrando lucro diário\n- Indicador visual (verde para lucro, vermelho para perda)\n\n### ✅ Home - Balanço do Período (components/balance-card.tsx)\n- Agrupa operações em períodos de 7 dias\n- Mostra 4 semanas do mês (28 dias)\n- Calcula ganhos e perdas semanais\n- Gráfico de área com pontos coloridos (verde/vermelho)\n- Tooltip mostrando valores de cada semana\n\n### ✅ Home - Top Operações (components/top-operations-card.tsx)\n- Agrupa operações por moeda (symbol)\n- Calcula total de entradas, investimento e lucro por moeda\n- Ordena por lucro (maior para menor)\n- Exibe top 4 moedas\n- Ranking visual com medalhas para top 3\n- Usa apenas nomes das moedas (sem ícones)\n\n### ✅ Calculadora de Projeção (components/calculator-card.tsx)\n- Fórmula corrigida para cálculo diário: `investimento × 87% × 60%`\n- Fórmula corrigida para cálculo mensal: `retorno_diário × 22 dias`\n- 3 perfis de risco: Conservador (1%), Moderado (3%), Arrojado (5%)\n- Seleção de período: Dia ou Mês\n- Calendário para salvar projeções\n- Modal de confirmação e sucesso\n\n### ✅ Projeção Salva (components/projection-card.tsx)\n- Exibe projeção salva anteriormente\n- Alterna entre visualização diária e mensal\n- Gráfico semicircular com percentual\n- Botão para visualizar operações\n\n## Como Usar\n\n### 1. Configurar API Token\n1. Acesse a página de Perfil\n2. Insira seu API Token no campo \"API Token\"\n3. Clique em \"Conectar\"\n4. Seus dados serão carregados automaticamente\n\n### 2. Visualizar Operações\n- Acesse \"Operações\" no menu\n- Todas as suas trades serão carregadas automaticamente\n- Use os filtros para ver apenas lucrativas ou não lucrativas\n- Exporte para CSV se necessário\n\n### 3. Dashboard (Home)\n- **Lucro do Mês**: Mostra seu lucro total do mês atual\n- **Balanço do Período**: Gráfico semanal de ganhos/perdas\n- **Top Operações**: Ranking das moedas mais lucrativas\n- **Calculadora**: Calcule projeções de investimento\n- **Projeção Salva**: Visualize sua última projeção\n\n## Endpoints Utilizados\n\n| Endpoint | Método | Uso |\n|----------|--------|-----|\n| `/token/users/me` | GET | Buscar dados do usuário |\n| `/token/trades` | GET | Listar todas as operações |\n| `/token/trades/{id}` | GET | Buscar operação específica |\n| `/token/wallets` | GET | Buscar carteiras |\n| `/token/trades/open` | POST | Abrir nova operação |\n\n## Estrutura de Dados\n\n### Trade (Operação)\n\\`\\`\\`typescript\n{\n  id: string\n  symbol: string          // Ex: \"BTCUSDT\"\n  amount: number         // Valor investido\n  pnl: number           // Lucro/Perda\n  openTime: number      // Timestamp de abertura\n  closeTime: number     // Timestamp de fechamento\n  status: \"COMPLETED\" | \"CANCELLED\" | \"PENDING\" | \"OPEN\"\n  direction: \"BUY\" | \"SELL\"\n}\n\\`\\`\\`\n\n### UserData (Usuário)\n\\`\\`\\`typescript\n{\n  id: string\n  email: string\n  name: string\n  nickname: string\n  country: string\n  phone: string\n  language: string\n  active: boolean\n}\n\\`\\`\\`\n\n## Cálculos Implementados\n\n### Lucro do Mês\n\\`\\`\\`typescript\nconst totalProfit = trades\n  .filter(trade => isCurrentMonth(trade.openTime))\n  .reduce((sum, trade) => sum + trade.pnl, 0)\n\\`\\`\\`\n\n### Balanço Semanal\n\\`\\`\\`typescript\nconst weekIndex = Math.floor((day - 1) / 7) + 1\n// Agrupa trades em semanas de 7 dias\n\\`\\`\\`\n\n### Top Operações\n\\`\\`\\`typescript\n// Agrupa por símbolo e soma:\n// - Número de entradas\n// - Total investido (amount)\n// - Total de lucro (pnl)\n// Ordena por lucro decrescente\n\\`\\`\\`\n\n### Projeção\n\\`\\`\\`typescript\n// Diária\nconst dailyReturn = investment × 0.87 × 0.60\n\n// Mensal\nconst monthlyReturn = dailyReturn × 22\n\\`\\`\\`\n\n## Status da Integração\n\n✅ API Client criado e funcional\n✅ Perfil integrado com `/token/users/me`\n✅ Operações integradas com `/token/trades`\n✅ Home integrada com dados reais da API\n✅ Calculadoras com fórmulas corretas\n✅ Todos os componentes comunicando entre si\n✅ Tratamento de erros implementado\n✅ Loading states em todos os componentes\n✅ Formatação de moeda brasileira (BRL)\n✅ Remoção de sufixo \"USDT\" das moedas\n\n## Próximos Passos (Opcional)\n\n- [ ] Implementar refresh automático de dados\n- [ ] Adicionar filtros por data nas operações\n- [ ] Implementar abertura de trades via interface\n- [ ] Adicionar notificações de sucesso/erro\n- [ ] Implementar cache de dados\n- [ ] Adicionar mais gráficos e estatísticas\n","size_bytes":8236},"components/ui/command.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { Command as CommandPrimitive } from 'cmdk'\nimport { SearchIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog'\n\nfunction Command({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      data-slot=\"command\"\n      className={cn(\n        'bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandDialog({\n  title = 'Command Palette',\n  description = 'Search for a command to run...',\n  children,\n  className,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof Dialog> & {\n  title?: string\n  description?: string\n  className?: string\n  showCloseButton?: boolean\n}) {\n  return (\n    <Dialog {...props}>\n      <DialogHeader className=\"sr-only\">\n        <DialogTitle>{title}</DialogTitle>\n        <DialogDescription>{description}</DialogDescription>\n      </DialogHeader>\n      <DialogContent\n        className={cn('overflow-hidden p-0', className)}\n        showCloseButton={showCloseButton}\n      >\n        <Command className=\"[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nfunction CommandInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div\n      data-slot=\"command-input-wrapper\"\n      className=\"flex h-9 items-center gap-2 border-b px-3\"\n    >\n      <SearchIcon className=\"size-4 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        data-slot=\"command-input\"\n        className={cn(\n          'placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50',\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CommandList({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn(\n        'max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandEmpty({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return (\n    <CommandPrimitive.Empty\n      data-slot=\"command-empty\"\n      className=\"py-6 text-center text-sm\"\n      {...props}\n    />\n  )\n}\n\nfunction CommandGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        'text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn('bg-border -mx-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CommandItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        \"data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"command-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4824},"components/top-operations-card.tsx":{"content":"\"use client\"\n\nimport { Card } from \"@/components/ui/card\"\nimport { useEffect, useState } from \"react\"\nimport { createApiClient, formatCurrencyPair, type Trade } from \"@/lib/api\"\nimport Image from \"next/image\"\nimport { getMonthAbbreviation } from \"@/lib/date-utils\"\n\ninterface TopOperationsCardProps {\n  dateRange: { start: string; end: string }\n  currentMonth: string\n}\n\ninterface TopOperation {\n  rank: number\n  symbol: string\n  entries: number\n  investment: number\n  profit: number\n}\n\nexport function TopOperationsCard({ dateRange, currentMonth }: TopOperationsCardProps) {\n  const [operations, setOperations] = useState<TopOperation[]>([])\n  const [isLoading, setIsLoading] = useState(false)\n\n  useEffect(() => {\n    const fetchTopOperations = async () => {\n      const apiClient = createApiClient()\n      if (!apiClient) return\n\n      setIsLoading(true)\n      try {\n        const response = await apiClient.getTrades(1, 100)\n\n        const [startDay, startMonth, startYear] = dateRange.start.split(\"/\").map(Number)\n        const [endDay, endMonth, endYear] = dateRange.end.split(\"/\").map(Number)\n        const startDate = new Date(startYear, startMonth - 1, startDay)\n        const endDate = new Date(endYear, endMonth - 1, endDay, 23, 59, 59)\n\n        const filteredTrades = response.data.filter((trade) => {\n          const tradeDate = new Date(trade.openTime)\n          return tradeDate >= startDate && tradeDate <= endDate\n        })\n\n        const symbolStats = new Map<string, { entries: number; investment: number; profit: number }>()\n\n        filteredTrades.forEach((trade: Trade) => {\n          const symbol = formatCurrencyPair(trade.symbol)\n          const existing = symbolStats.get(symbol) || { entries: 0, investment: 0, profit: 0 }\n\n          symbolStats.set(symbol, {\n            entries: existing.entries + 1,\n            investment: existing.investment + trade.amount,\n            profit: existing.profit + trade.pnl,\n          })\n        })\n\n        const topOps = Array.from(symbolStats.entries())\n          .map(([symbol, stats]) => ({\n            rank: 0,\n            symbol,\n            ...stats,\n          }))\n          .sort((a, b) => b.profit - a.profit)\n          .slice(0, 4)\n          .map((op, index) => ({ ...op, rank: index + 1 }))\n\n        setOperations(topOps)\n        console.log(\"[v0] Top operations calculated:\", topOps, \"for period:\", dateRange)\n      } catch (error) {\n        console.error(\"[v0] Error fetching top operations:\", error)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    fetchTopOperations()\n  }, [dateRange])\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat(\"pt-BR\", {\n      style: \"currency\",\n      currency: \"BRL\",\n      minimumFractionDigits: 0,\n    }).format(value)\n  }\n\n  const getRankDisplay = (rank: number) => {\n    if (rank === 1) {\n      return (\n        <div className=\"w-[34px] h-[34px] flex items-center justify-center\">\n          <Image src=\"/assets/rank1.png\" alt=\"1st place\" width={34} height={34} className=\"object-contain\" />\n        </div>\n      )\n    }\n    if (rank === 2) {\n      return (\n        <div className=\"w-[34px] h-[34px] flex items-center justify-center\">\n          <Image src=\"/assets/rank2.png\" alt=\"2nd place\" width={34} height={34} className=\"object-contain\" />\n        </div>\n      )\n    }\n    if (rank === 3) {\n      return (\n        <div className=\"w-[34px] h-[34px] flex items-center justify-center\">\n          <Image src=\"/assets/rank3.png\" alt=\"3rd place\" width={34} height={34} className=\"object-contain\" />\n        </div>\n      )\n    }\n    return <span className=\"font-bold text-[15px]\">{rank}</span>\n  }\n\n  return (\n    <Card className=\"bg-[#1d1d41] border-none rounded-[20px] p-6\">\n      <div className=\"flex justify-between items-center mb-5 flex-wrap gap-2\">\n        <h4 className=\"text-lg font-semibold text-white\">Top operações</h4>\n        <p className=\"text-base text-[#8c89b4]\">\n          {dateRange.start.split(\"/\")[0]} de {getMonthAbbreviation(currentMonth)}. - {dateRange.end.split(\"/\")[0]} de{\" \"}\n          {getMonthAbbreviation(currentMonth)}\n        </p>\n      </div>\n\n      {isLoading ? (\n        <div className=\"text-center py-8 text-[#aeabd8]\">Carregando...</div>\n      ) : operations.length === 0 ? (\n        <div className=\"text-center py-8 text-[#aeabd8]\">Nenhuma operação encontrada</div>\n      ) : (\n        <div className=\"flex flex-col gap-px bg-[rgba(174,171,216,0.1)] py-px\">\n          <div className=\"grid grid-cols-[0.5fr_1.5fr_1fr_1fr_1fr] items-center px-2.5 py-2.5 bg-[#1d1d41] text-[#aeabd8] text-xs\">\n            <span>Rank</span>\n            <span>Moedas</span>\n            <span>Entradas</span>\n            <span>Aportes</span>\n            <span>Lucro</span>\n          </div>\n          {operations.map((operation, index) => (\n            <div\n              key={`${operation.rank}-${index}`}\n              className=\"grid grid-cols-[0.5fr_1.5fr_1fr_1fr_1fr] items-center px-2.5 py-4 bg-[#1d1d41] text-sm text-white\"\n            >\n              <span className=\"flex justify-center\">{getRankDisplay(operation.rank)}</span>\n              <div className=\"flex items-center gap-2.5 pl-2.5\">\n                <span className=\"font-medium\">{operation.symbol}</span>\n              </div>\n              <span className=\"pl-2.5\">{operation.entries}</span>\n              <span className=\"pl-2.5\">{formatCurrency(operation.investment)}</span>\n              <span\n                className={`flex items-center gap-1 pl-2.5 font-medium ${operation.profit >= 0 ? \"text-[#16c784]\" : \"text-[#f2474a]\"}`}\n              >\n                {formatCurrency(Math.abs(operation.profit))}\n                <svg\n                  width=\"12\"\n                  height=\"12\"\n                  viewBox=\"0 0 12 12\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className={operation.profit < 0 ? \"rotate-180\" : \"\"}\n                >\n                  <path\n                    d=\"M6 10L6 2M6 2L2 6M6 2L10 6\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                </svg>\n              </span>\n            </div>\n          ))}\n        </div>\n      )}\n    </Card>\n  )\n}\n","size_bytes":6323},"components/ui/skeleton.tsx":{"content":"import { cn } from '@/lib/utils'\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn('bg-accent animate-pulse rounded-md', className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":276},"app/tutoriais/page.tsx":{"content":"\"use client\"\n\nimport { useEffect, useState, useRef } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { Header } from \"@/components/header\"\nimport { Search, Check } from \"lucide-react\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\n\ninterface Video {\n  id: number\n  title: string\n  duration: string\n  watched: boolean\n  videoUrl: string\n}\n\ndeclare global {\n  interface Window {\n    YT: any\n    onYouTubeIframeAPIReady: () => void\n  }\n}\n\nexport default function TutoriaisPage() {\n  const router = useRouter()\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\n  const [searchQuery, setSearchQuery] = useState(\"\")\n  const [currentVideoIndex, setCurrentVideoIndex] = useState(0)\n  const playerRef = useRef<any>(null)\n  const playerContainerRef = useRef<HTMLDivElement>(null)\n\n  const [videos, setVideos] = useState<Video[]>([\n    {\n      id: 1,\n      title: \"Como operar pela primeira vez\",\n      duration: \"15:00\",\n      watched: false,\n      videoUrl: \"DumytDSlii0\",\n    },\n    {\n      id: 2,\n      title: \"Como fazer deposito\",\n      duration: \"10:30\",\n      watched: false,\n      videoUrl: \"SaA1V7dT_9E\",\n    },\n    {\n      id: 3,\n      title: \"Como fazer seu saque\",\n      duration: \"08:45\",\n      watched: false,\n      videoUrl: \"18-6Tzz_hbI\",\n    },\n    {\n      id: 4,\n      title: \"Como fazer xxxxx\",\n      duration: \"12:20\",\n      watched: false,\n      videoUrl: \"pUodwfXHt00\",\n    },\n    {\n      id: 5,\n      title: \"Como fazer xxxxx\",\n      duration: \"15:00\",\n      watched: false,\n      videoUrl: \"DumytDSlii0\",\n    },\n    {\n      id: 6,\n      title: \"Como fazer xxxxx\",\n      duration: \"10:30\",\n      watched: false,\n      videoUrl: \"SaA1V7dT_9E\",\n    },\n    {\n      id: 7,\n      title: \"Como fazer xxxxx\",\n      duration: \"08:45\",\n      watched: false,\n      videoUrl: \"18-6Tzz_hbI\",\n    },\n  ])\n\n  useEffect(() => {\n    const savedVideos = localStorage.getItem(\"tutorialVideos\")\n    if (savedVideos) {\n      setVideos(JSON.parse(savedVideos))\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(\"tutorialVideos\", JSON.stringify(videos))\n  }, [videos])\n\n  useEffect(() => {\n    const authStatus = localStorage.getItem(\"isAuthenticated\")\n    if (authStatus !== \"true\") {\n      router.push(\"/login\")\n    } else {\n      setIsAuthenticated(true)\n    }\n  }, [router])\n\n  useEffect(() => {\n    if (!isAuthenticated) return\n\n    const tag = document.createElement(\"script\")\n    tag.src = \"https://www.youtube.com/iframe_api\"\n    const firstScriptTag = document.getElementsByTagName(\"script\")[0]\n    firstScriptTag.parentNode?.insertBefore(tag, firstScriptTag)\n\n    window.onYouTubeIframeAPIReady = () => {\n      initializePlayer()\n    }\n\n    return () => {\n      if (playerRef.current) {\n        playerRef.current.destroy()\n      }\n    }\n  }, [isAuthenticated])\n\n  useEffect(() => {\n    if (window.YT && window.YT.Player && isAuthenticated) {\n      initializePlayer()\n    }\n  }, [currentVideoIndex, isAuthenticated])\n\n  const initializePlayer = () => {\n    if (playerRef.current) {\n      playerRef.current.destroy()\n    }\n\n    const currentVideo = filteredVideos[currentVideoIndex]\n    if (!currentVideo || !playerContainerRef.current) return\n\n    playerRef.current = new window.YT.Player(playerContainerRef.current, {\n      videoId: currentVideo.videoUrl,\n      playerVars: {\n        autoplay: 0,\n        controls: 1,\n        modestbranding: 1,\n        rel: 0,\n      },\n      events: {\n        onStateChange: onPlayerStateChange,\n      },\n    })\n  }\n\n  const onPlayerStateChange = (event: any) => {\n    if (event.data === 0) {\n      toggleVideoWatched()\n    }\n  }\n\n  const toggleVideoWatched = () => {\n    const updatedVideos = [...videos]\n    const videoId = filteredVideos[currentVideoIndex].id\n    const videoIndex = updatedVideos.findIndex((v) => v.id === videoId)\n    if (videoIndex !== -1) {\n      updatedVideos[videoIndex].watched = !updatedVideos[videoIndex].watched\n      setVideos(updatedVideos)\n    }\n  }\n\n  const filteredVideos = videos.filter((video) => video.title.toLowerCase().includes(searchQuery.toLowerCase()))\n\n  const watchedCount = videos.filter((v) => v.watched).length\n  const progressPercentage = Math.round((watchedCount / videos.length) * 100)\n\n  const handleVideoSelect = (index: number) => {\n    setCurrentVideoIndex(index)\n  }\n\n  const handleNextVideo = () => {\n    toggleVideoWatched()\n    if (currentVideoIndex < filteredVideos.length - 1) {\n      setCurrentVideoIndex(currentVideoIndex + 1)\n    }\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-[#141332] flex items-center justify-center\">\n        <div className=\"text-white\">Carregando...</div>\n      </div>\n    )\n  }\n\n  const currentVideo = filteredVideos[currentVideoIndex]\n\n  return (\n    <div className=\"min-h-screen bg-[#141332]\">\n      <Header />\n      <main className=\"pb-12\">\n        <div className=\"container mx-auto px-4 md:px-10 lg:px-[124px] max-w-[1920px]\">\n          <div className=\"flex flex-col lg:flex-row gap-6\">\n            <div className=\"lg:w-[380px] bg-[#1d1d41] border border-[rgba(174,171,216,0.25)] rounded-xl p-6\">\n              <div className=\"mb-6\">\n                <p className=\"text-[#aeabd8] text-sm mb-2\">Seu progresso de aprendizagem</p>\n                <div className=\"relative w-full h-2 bg-[#141332] rounded-full overflow-hidden\">\n                  <div\n                    className=\"absolute top-0 left-0 h-full bg-gradient-to-r from-[#7c3aed] to-[#a855f7] rounded-full transition-all duration-500\"\n                    style={{ width: `${progressPercentage}%` }}\n                  />\n                </div>\n                <p className=\"text-[#7c3aed] text-sm font-semibold mt-2\">{progressPercentage}%</p>\n              </div>\n\n              <div className=\"relative mb-6\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Pesquisar vídeo\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"bg-[#141332] border-[rgba(174,171,216,0.25)] text-white placeholder:text-[#aeabd8] pr-10\"\n                />\n                <Search className=\"absolute right-3 top-1/2 -translate-y-1/2 w-4 h-4 text-[#aeabd8]\" />\n              </div>\n\n              <div className=\"space-y-1\">\n                {filteredVideos.map((video, index) => (\n                  <button\n                    key={video.id}\n                    onClick={() => handleVideoSelect(index)}\n                    className={`w-full grid grid-cols-[1fr,90px,70px] gap-3 items-center py-3 px-3 rounded-lg transition-colors ${\n                      currentVideoIndex === index ? \"bg-[#7c3aed]/20\" : \"hover:bg-[#141332]/40\"\n                    }`}\n                  >\n                    <span className=\"text-white text-sm text-left truncate\">{video.title}</span>\n                    <div className=\"flex justify-center\">\n                      {video.watched && <Check className=\"w-5 h-5 text-[#7c3aed]\" />}\n                    </div>\n                    <span className=\"text-[#aeabd8] text-sm text-right\">{video.duration}</span>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"flex-1 bg-[#1d1d41] border border-[rgba(174,171,216,0.25)] rounded-xl p-6\">\n              {currentVideo ? (\n                <>\n                  <div className=\"relative w-full aspect-video bg-black rounded-lg overflow-hidden mb-6\">\n                    <div ref={playerContainerRef} className=\"w-full h-full\" />\n                  </div>\n\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div>\n                      <h3 className=\"text-white text-xl font-semibold mb-1\">{currentVideo.title}</h3>\n                      <p className=\"text-[#aeabd8] text-sm\">{currentVideo.duration}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex gap-3\">\n                    <Button onClick={toggleVideoWatched} className=\"bg-[#7c3aed] hover:bg-[#6d28d9] text-white\">\n                      {currentVideo.watched ? \"Marcar como não visualizado\" : \"Marcar como visualizado\"}\n                    </Button>\n                    {currentVideoIndex < filteredVideos.length - 1 && (\n                      <Button\n                        onClick={handleNextVideo}\n                        className=\"bg-transparent border border-[rgba(174,171,216,0.25)] text-white hover:bg-[#7c3aed]/20\"\n                      >\n                        Próximo\n                      </Button>\n                    )}\n                  </div>\n                </>\n              ) : (\n                <div className=\"flex items-center justify-center h-full min-h-[400px]\">\n                  <p className=\"text-[#aeabd8]\">Nenhum vídeo encontrado</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  )\n}\n","size_bytes":8979},"components/ui/label.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as LabelPrimitive from '@radix-ui/react-label'\n\nimport { cn } from '@/lib/utils'\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        'flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n","size_bytes":612},"components/header.tsx":{"content":"\"use client\"\n\nimport Image from \"next/image\"\nimport Link from \"next/link\"\nimport { useEffect, useState } from \"react\"\nimport { Bell, X, Trash2 } from \"lucide-react\"\nimport { usePathname, useRouter } from \"next/navigation\"\nimport { createApiClient } from \"@/lib/api\"\n\ninterface Notification {\n  id: number\n  date: string\n  message: string\n  unread: boolean\n  type: \"trade_success\" | \"trade_failure\" | \"deposit\" | \"withdrawal\" | \"level_up\"\n}\n\nexport function Header() {\n  const pathname = usePathname()\n  const [activeNav, setActiveNav] = useState(\"Home\")\n  const [showNotifications, setShowNotifications] = useState(false)\n  const router = useRouter()\n  const [userName, setUserName] = useState(\"Usuário\")\n\n  const [notifications, setNotifications] = useState<Notification[]>([])\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      const apiClient = createApiClient()\n      if (!apiClient) return\n\n      try {\n        const userData = await apiClient.getUserInfo()\n        setUserName(userData.name || userData.nickname || \"Usuário\")\n      } catch (error) {\n        console.error(\"[v0] Error fetching user data:\", error)\n      }\n    }\n\n    fetchUserData()\n\n    const savedNotifications = localStorage.getItem(\"notifications\")\n    if (savedNotifications) {\n      try {\n        setNotifications(JSON.parse(savedNotifications))\n      } catch (error) {\n        console.error(\"[v0] Error parsing notifications:\", error)\n        setNotifications([])\n      }\n    }\n\n    const handleNewNotification = (event: CustomEvent) => {\n      const newNotification = event.detail as Notification\n      setNotifications((prev) => {\n        const updated = [newNotification, ...prev]\n        localStorage.setItem(\"notifications\", JSON.stringify(updated))\n        return updated\n      })\n    }\n\n    window.addEventListener(\"newNotification\" as any, handleNewNotification)\n\n    return () => {\n      window.removeEventListener(\"newNotification\" as any, handleNewNotification)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (pathname === \"/operacoes\") {\n      setActiveNav(\"Operações\")\n    } else if (pathname === \"/tutoriais\") {\n      setActiveNav(\"Tutoriais\")\n    } else if (pathname === \"/perfil\") {\n      setActiveNav(\"Meu perfil\")\n    } else {\n      setActiveNav(\"Home\")\n    }\n  }, [pathname])\n\n  const unreadCount = notifications.filter((n) => n.unread).length\n\n  const handleNotificationClick = (id: number) => {\n    setNotifications((prev) => {\n      const updated = prev.map((n) => (n.id === id ? { ...n, unread: false } : n))\n      localStorage.setItem(\"notifications\", JSON.stringify(updated))\n      return updated\n    })\n  }\n\n  const handleClearAll = () => {\n    setNotifications([])\n    localStorage.removeItem(\"notifications\")\n  }\n\n  const navItems = [\n    { key: \"Home\", label: \"Home\" },\n    { key: \"Operações\", label: \"Operações\" },\n    { key: \"Tutoriais\", label: \"Tutoriais\" },\n    { key: \"Meu perfil\", label: \"Meu perfil\" },\n    { key: \"Sair\", label: \"Sair\" },\n  ]\n\n  const handleNavClick = (item: string) => {\n    setActiveNav(item)\n    if (item === \"Sair\") {\n      localStorage.removeItem(\"isAuthenticated\")\n      router.push(\"/login\")\n      return\n    }\n    if (item === \"Home\") {\n      router.push(\"/\")\n      return\n    }\n    if (item === \"Operações\") {\n      router.push(\"/operacoes\")\n      return\n    }\n    if (item === \"Tutoriais\") {\n      router.push(\"/tutoriais\")\n      return\n    }\n    if (item === \"Meu perfil\") {\n      router.push(\"/perfil\")\n      return\n    }\n  }\n\n  const getGreeting = () => {\n    const hour = new Date().getHours()\n    if (hour >= 5 && hour < 12) {\n      return \"Bom dia\"\n    } else if (hour >= 12 && hour < 18) {\n      return \"Boa tarde\"\n    } else {\n      return \"Boa noite\"\n    }\n  }\n\n  return (\n    <header className=\"py-7 relative\">\n      <div className=\"container mx-auto px-4 md:px-10 lg:px-[124px] max-w-[1920px]\">\n        <div className=\"flex flex-wrap justify-between items-center gap-5\">\n          <div className=\"flex flex-col md:flex-row items-start md:items-center gap-6 md:gap-[60px]\">\n            <Link href=\"/\" className=\"flex items-center gap-2.5\">\n              <Image src=\"/assets/Subtract.svg\" alt=\"Assessor Logo\" width={39} height={49} />\n              <div className=\"flex flex-col text-white\">\n                <span className=\"font-[Public_Sans] font-extrabold text-[14.7px] leading-none\">meu</span>\n                <span className=\"font-[Public_Sans] font-extrabold text-[26.8px] leading-none\">assessor</span>\n              </div>\n            </Link>\n            <div>\n              <div className=\"flex items-center gap-2 mb-1\">\n                <h2 className=\"font-semibold text-[20.8px] text-white\">\n                  {getGreeting()}, {userName}!\n                </h2>\n                <Image src=\"/assets/hands.png\" alt=\"👋\" width={22} height={22} />\n              </div>\n              <p className=\"text-[13.9px] text-[#aeabd8]\">Suas operações vão muito bem, continue assim!</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-12\">\n            <nav className=\"hidden lg:block\">\n              <ul className=\"flex gap-8\">\n                {navItems.map((item) => (\n                  <li key={item.key}>\n                    <button\n                      onClick={() => handleNavClick(item.key)}\n                      className={`font-[Poppins] text-[17px] transition-colors ${\n                        activeNav === item.key ? \"text-[#845bf6] font-bold\" : \"text-[#aeabd8] hover:text-[#845bf6]\"\n                      }`}\n                    >\n                      {item.label}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </nav>\n            <div className=\"flex items-center gap-6\">\n              <div className=\"relative\">\n                <button\n                  onClick={() => setShowNotifications(!showNotifications)}\n                  className=\"p-2 bg-transparent border-none cursor-pointer hover:bg-[#27264e]/50 rounded-lg transition-colors\"\n                >\n                  <Bell className=\"w-6 h-6 text-gray-400\" />\n                </button>\n                {unreadCount > 0 && (\n                  <span className=\"absolute top-0 right-0 bg-[#f2474a] text-white rounded-full w-[14.5px] h-[14.5px] flex items-center justify-center text-[8.7px]\">\n                    {unreadCount}\n                  </span>\n                )}\n\n                {showNotifications && (\n                  <>\n                    <div className=\"fixed inset-0 z-40\" onClick={() => setShowNotifications(false)} />\n                    <div className=\"absolute right-0 top-12 w-[348px] bg-[#1d1d41] border border-[rgba(174,171,216,0.25)] rounded-xl shadow-2xl z-50 overflow-hidden\">\n                      <div className=\"flex items-center justify-between p-4 border-b border-[rgba(174,171,216,0.15)]\">\n                        <h3 className=\"text-white font-semibold text-lg\">Avisos</h3>\n                        <div className=\"flex items-center gap-2\">\n                          {notifications.length > 0 && (\n                            <button\n                              onClick={handleClearAll}\n                              className=\"p-1.5 hover:bg-[#27264e]/50 rounded-lg transition-colors\"\n                              title=\"Limpar todas\"\n                            >\n                              <Trash2 className=\"w-4 h-4 text-[#aeabd8]\" />\n                            </button>\n                          )}\n                          <button\n                            onClick={() => setShowNotifications(false)}\n                            className=\"p-1 hover:bg-[#27264e]/50 rounded-lg transition-colors\"\n                          >\n                            <X className=\"w-5 h-5 text-[#aeabd8]\" />\n                          </button>\n                        </div>\n                      </div>\n                      <div className=\"max-h-[500px] overflow-y-auto\">\n                        {notifications.length === 0 ? (\n                          <div className=\"p-8 text-center\">\n                            <Bell className=\"w-12 h-12 text-[#aeabd8] mx-auto mb-3 opacity-50\" />\n                            <p className=\"text-[#aeabd8] text-sm\">Nenhuma notificação</p>\n                            <p className=\"text-[#8c89b4] text-xs mt-1\">\n                              Você será notificado sobre trades, depósitos e saques\n                            </p>\n                          </div>\n                        ) : (\n                          notifications.map((notification) => (\n                            <div\n                              key={notification.id}\n                              onClick={() => handleNotificationClick(notification.id)}\n                              className=\"p-4 border-b border-[rgba(174,171,216,0.15)] hover:bg-[#27264e]/30 transition-colors cursor-pointer\"\n                            >\n                              <div className=\"flex items-start justify-between gap-3\">\n                                <div className=\"flex-1\">\n                                  <p className=\"text-[#aeabd8] text-xs mb-2\">{notification.date}</p>\n                                  <p className=\"text-white text-sm leading-relaxed\">{notification.message}</p>\n                                </div>\n                                {notification.unread && (\n                                  <div className=\"w-2 h-2 bg-[#7c3aed] rounded-full mt-1 flex-shrink-0\" />\n                                )}\n                              </div>\n                            </div>\n                          ))\n                        )}\n                      </div>\n                    </div>\n                  </>\n                )}\n              </div>\n              <Image src=\"/assets/Ellipse.svg\" alt=\"User Avatar\" width={44} height={44} className=\"rounded-full\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  )\n}\n","size_bytes":9955},"components/result-card.tsx":{"content":"\"use client\"\nimport { Card } from \"@/components/ui/card\"\nimport { useEffect, useState } from \"react\"\nimport { AreaChart, Area, ResponsiveContainer } from \"recharts\"\nimport { createApiClient } from \"@/lib/api\"\nimport { getMonthAbbreviation } from \"@/lib/date-utils\"\n\ninterface ResultCardProps {\n  dateRange: { start: string; end: string }\n  currentMonth: string\n}\n\nexport function ResultCard({ dateRange, currentMonth }: ResultCardProps) {\n  const [result, setResult] = useState({ value: 0, percentage: 0 })\n  const [chartData, setChartData] = useState<{ value: number }[]>([])\n  const [isLoading, setIsLoading] = useState(false)\n\n  useEffect(() => {\n    const fetchMonthlyProfit = async () => {\n      const apiClient = createApiClient()\n      if (!apiClient) return\n\n      setIsLoading(true)\n      try {\n        const response = await apiClient.getTrades(1, 100)\n\n        const [startDay, startMonth, startYear] = dateRange.start.split(\"/\").map(Number)\n        const [endDay, endMonth, endYear] = dateRange.end.split(\"/\").map(Number)\n        const startDate = new Date(startYear, startMonth - 1, startDay)\n        const endDate = new Date(endYear, endMonth - 1, endDay, 23, 59, 59)\n\n        const filteredTrades = response.data.filter((trade) => {\n          const tradeDate = new Date(trade.openTime)\n          return tradeDate >= startDate && tradeDate <= endDate\n        })\n\n        const totalProfit = filteredTrades.reduce((sum, trade) => sum + trade.pnl, 0)\n        const totalInvestment = filteredTrades.reduce((sum, trade) => sum + trade.amount, 0)\n        const percentage = totalInvestment > 0 ? (totalProfit / totalInvestment) * 100 : 0\n\n        setResult({ value: totalProfit, percentage })\n\n        const dailyProfits = new Map<number, number>()\n        filteredTrades.forEach((trade) => {\n          const day = new Date(trade.openTime).getDate()\n          dailyProfits.set(day, (dailyProfits.get(day) || 0) + trade.pnl)\n        })\n\n        const daysInPeriod = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1\n        const data = Array.from({ length: daysInPeriod }, (_, i) => ({\n          value: dailyProfits.get(i + 1) || 0,\n        }))\n        setChartData(data)\n      } catch (error) {\n        console.error(\"[v0] Error fetching monthly profit:\", error)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    fetchMonthlyProfit()\n  }, [dateRange])\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat(\"pt-BR\", {\n      style: \"currency\",\n      currency: \"BRL\",\n      minimumFractionDigits: 0,\n    }).format(value)\n  }\n\n  return (\n    <Card className=\"bg-[#1d1d41] border-none rounded-[20px] p-6\">\n      <div className=\"flex justify-between items-center mb-5 flex-wrap gap-2\">\n        <h4 className=\"text-lg font-semibold text-white\">Lucro do Mês</h4>\n        <p className=\"text-base text-[#8c89b4]\">\n          {dateRange.start.split(\"/\")[0]} de {getMonthAbbreviation(currentMonth)}. - {dateRange.end.split(\"/\")[0]} de{\" \"}\n          {getMonthAbbreviation(currentMonth)}\n        </p>\n      </div>\n\n      {isLoading ? (\n        <div className=\"text-center py-8 text-[#aeabd8]\">Carregando...</div>\n      ) : (\n        <>\n          <div className=\"flex items-center gap-4 mb-2\">\n            <div\n              className={`w-[45px] h-[45px] rounded-[10px] flex items-center justify-center ${result.value >= 0 ? \"bg-[#16c784]\" : \"bg-[#f2474a]\"}`}\n            >\n              {result.value >= 0 ? (\n                <svg width=\"13\" height=\"13\" viewBox=\"0 0 13 13\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path\n                    d=\"M6.5 10.5V2.5M6.5 2.5L2.5 6.5M6.5 2.5L10.5 6.5\"\n                    stroke=\"white\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                </svg>\n              ) : (\n                <svg width=\"13\" height=\"13\" viewBox=\"0 0 13 13\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path\n                    d=\"M6.5 2.5V10.5M6.5 10.5L10.5 6.5M6.5 10.5L2.5 6.5\"\n                    stroke=\"white\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                </svg>\n              )}\n            </div>\n            <p className=\"text-[35px] font-semibold text-white\">{formatCurrency(result.value)}</p>\n            <span\n              className={`text-xs px-2 py-1 rounded-[10px] ${result.value >= 0 ? \"bg-[rgba(2,177,90,0.15)] text-[#16c784]\" : \"bg-[rgba(242,71,74,0.15)] text-[#f2474a]\"}`}\n            >\n              {result.value >= 0 ? \"+\" : \"\"}\n              {result.percentage.toFixed(2)}%\n            </span>\n          </div>\n\n          <div className=\"flex items-center gap-2 text-xs text-[#8c89b4] mb-5\">\n            <p>Consórcio 8%</p>\n            <span className=\"bg-[rgba(140,137,180,0.15)] text-[#8c89b4] px-2 py-1 rounded-[10px]\">\n              {formatCurrency(result.value * 0.08)}\n            </span>\n          </div>\n\n          <div className=\"relative w-full h-[120px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <AreaChart data={chartData} margin={{ top: 10, right: 10, left: 0, bottom: 20 }}>\n                <defs>\n                  <linearGradient id=\"colorValue\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#16c784\" stopOpacity={0.3} />\n                    <stop offset=\"95%\" stopColor=\"#16c784\" stopOpacity={0} />\n                  </linearGradient>\n                </defs>\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"value\"\n                  stroke=\"#16c784\"\n                  strokeWidth={2}\n                  fill=\"url(#colorValue)\"\n                  animationDuration={1000}\n                  dot={false}\n                  activeDot={false as unknown as any}\n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          </div>\n        </>\n      )}\n    </Card>\n  )\n}\n","size_bytes":6079},"components/ui/dialog.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as DialogPrimitive from '@radix-ui/react-dialog'\nimport { XIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn('text-lg leading-none font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n","size_bytes":3985},"components/ui/toggle.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as TogglePrimitive from '@radix-ui/react-toggle'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap\",\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        outline:\n          'border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground',\n      },\n      size: {\n        default: 'h-9 px-2 min-w-9',\n        sm: 'h-8 px-1.5 min-w-8',\n        lg: 'h-10 px-2.5 min-w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nfunction Toggle({\n  className,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof TogglePrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <TogglePrimitive.Root\n      data-slot=\"toggle\"\n      className={cn(toggleVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Toggle, toggleVariants }\n","size_bytes":1571},"components/ui/button.tsx":{"content":"import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n        icon: 'size-9',\n        'icon-sm': 'size-8',\n        'icon-lg': 'size-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n","size_bytes":2143},"components/filters.tsx":{"content":"\"use client\"\n\nimport Image from \"next/image\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { format } from \"date-fns\"\nimport { ptBR } from \"date-fns/locale\"\nimport { useState, useEffect } from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\n\ninterface FiltersProps {\n  selectedPeriod: \"week\" | \"month\" | \"today\"\n  onPeriodChange: (period: \"week\" | \"month\" | \"today\") => void\n  currentMonth: string\n  onMonthChange: (month: string) => void\n  dateRange: { start: string; end: string }\n  onDateRangeChange: (range: { start: string; end: string }) => void\n}\n\nconst months = [\n  \"Janeiro\",\n  \"Fevereiro\",\n  \"Março\",\n  \"Abril\",\n  \"Maio\",\n  \"Junho\",\n  \"Julho\",\n  \"Agosto\",\n  \"Setembro\",\n  \"Outubro\",\n  \"Novembro\",\n  \"Dezembro\",\n]\n\nexport function Filters({\n  selectedPeriod,\n  onPeriodChange,\n  currentMonth,\n  onMonthChange,\n  dateRange,\n  onDateRangeChange,\n}: FiltersProps) {\n  const [startDate, setStartDate] = useState<Date>()\n  const [endDate, setEndDate] = useState<Date>()\n\n  useEffect(() => {\n    const monthIndex = months.indexOf(currentMonth)\n    const currentYear = new Date().getFullYear()\n\n    // Get first and last day of the selected month\n    const firstDay = new Date(currentYear, monthIndex, 1)\n    const lastDay = new Date(currentYear, monthIndex + 1, 0)\n\n    const newDateRange = {\n      start: format(firstDay, \"dd/MM/yyyy\"),\n      end: format(lastDay, \"dd/MM/yyyy\"),\n    }\n\n    onDateRangeChange(newDateRange)\n    setStartDate(firstDay)\n    setEndDate(lastDay)\n  }, [currentMonth, onDateRangeChange])\n\n  const handlePreviousMonth = () => {\n    const currentIndex = months.indexOf(currentMonth)\n    const newIndex = currentIndex === 0 ? 11 : currentIndex - 1\n    onMonthChange(months[newIndex])\n  }\n\n  const handleNextMonth = () => {\n    const currentIndex = months.indexOf(currentMonth)\n    const newIndex = currentIndex === 11 ? 0 : currentIndex + 1\n    onMonthChange(months[newIndex])\n  }\n\n  const handleDateSelect = (date: Date | undefined, type: \"start\" | \"end\") => {\n    if (type === \"start\") {\n      setStartDate(date)\n      if (date && endDate) {\n        onDateRangeChange({\n          start: format(date, \"dd/MM/yyyy\"),\n          end: format(endDate, \"dd/MM/yyyy\"),\n        })\n      }\n    } else {\n      setEndDate(date)\n      if (startDate && date) {\n        onDateRangeChange({\n          start: format(startDate, \"dd/MM/yyyy\"),\n          end: format(date, \"dd/MM/yyyy\"),\n        })\n      }\n    }\n  }\n\n  return (\n    <section className=\"py-9\">\n      <div className=\"container mx-auto px-4 md:px-10 lg:px-[124px] max-w-[1920px]\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-5\">\n          <div className=\"flex items-center gap-6\">\n            <button\n              onClick={handlePreviousMonth}\n              className=\"bg-[#27264e] border border-[rgba(174,171,216,0.53)] w-8 h-8 rounded-[5px] flex items-center justify-center cursor-pointer hover:bg-[#2f2e5a] transition-colors\"\n            >\n              <ChevronLeft className=\"w-5 h-5 text-[#aeabd8]\" />\n            </button>\n            <h3 className=\"font-semibold text-2xl text-white\">{currentMonth}</h3>\n            <button\n              onClick={handleNextMonth}\n              className=\"bg-[#27264e] border border-[rgba(174,171,216,0.53)] w-8 h-8 rounded-[5px] flex items-center justify-center cursor-pointer hover:bg-[#2f2e5a] transition-colors\"\n            >\n              <ChevronRight className=\"w-5 h-5 text-[#aeabd8]\" />\n            </button>\n          </div>\n          <div className=\"flex flex-col md:flex-row items-stretch md:items-center gap-6 w-full md:w-auto\">\n            <div className=\"flex items-center border border-[rgba(174,171,216,0.53)] rounded-[50px] p-1 bg-transparent\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => onPeriodChange(\"week\")}\n                className={`rounded-[50px] px-4 py-2 text-sm transition-all ${\n                  selectedPeriod === \"week\"\n                    ? \"bg-[#845bf6] text-white font-medium\"\n                    : \"bg-transparent text-[#aeabd8] hover:bg-[#845bf6]/20\"\n                }`}\n              >\n                Semana\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={() => onPeriodChange(\"month\")}\n                className={`rounded-[50px] px-4 py-2 text-sm transition-all ${\n                  selectedPeriod === \"month\"\n                    ? \"bg-[#845bf6] text-white font-medium\"\n                    : \"bg-transparent text-[#aeabd8] hover:bg-[#845bf6]/20\"\n                }`}\n              >\n                Mês\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={() => onPeriodChange(\"today\")}\n                className={`rounded-[50px] px-4 py-2 text-sm transition-all ${\n                  selectedPeriod === \"today\"\n                    ? \"bg-[#845bf6] text-white font-medium\"\n                    : \"bg-transparent text-[#aeabd8] hover:bg-[#845bf6]/20\"\n                }`}\n              >\n                Hoje\n              </Button>\n            </div>\n            <Popover>\n              <PopoverTrigger asChild>\n                <button className=\"flex items-center gap-2.5 bg-[#1d1d41] border border-[rgba(174,171,216,0.53)] rounded-[10px] px-4 py-2.5 text-white text-sm hover:bg-[#27264e] transition-colors cursor-pointer\">\n                  <Image src=\"/assets/calendar.png\" alt=\"Calendar\" width={18} height={18} />\n                  <span>\n                    {dateRange.start} até {dateRange.end}\n                  </span>\n                  <Image src=\"/assets/seta baixo.svg\" alt=\"Dropdown\" width={12} height={12} />\n                </button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-auto p-0 bg-[#1d1d41] border-[rgba(174,171,216,0.53)]\" align=\"end\">\n                <div className=\"p-4 space-y-4\">\n                  <div>\n                    <p className=\"text-sm text-[#aeabd8] mb-2\">Data inicial</p>\n                    <Calendar\n                      mode=\"single\"\n                      selected={startDate}\n                      onSelect={(date) => handleDateSelect(date, \"start\")}\n                      locale={ptBR}\n                      className=\"rounded-md\"\n                    />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-[#aeabd8] mb-2\">Data final</p>\n                    <Calendar\n                      mode=\"single\"\n                      selected={endDate}\n                      onSelect={(date) => handleDateSelect(date, \"end\")}\n                      locale={ptBR}\n                      className=\"rounded-md\"\n                      disabled={(date) => (startDate ? date < startDate : false)}\n                    />\n                  </div>\n                </div>\n              </PopoverContent>\n            </Popover>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n","size_bytes":7107},"app/login/page.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Image from \"next/image\"\n\nexport default function LoginPage() {\n  const [activeTab, setActiveTab] = useState<\"login\" | \"criar\">(\"login\")\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [formData, setFormData] = useState({\n    nome: \"\",\n    sobrenome: \"\",\n    email: \"\",\n    cpf: \"\",\n    telefone: \"\",\n    nascimento: \"\",\n  })\n  const router = useRouter()\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault()\n    // Simulate login - in production, validate credentials\n    if (email && password) {\n      localStorage.setItem(\"isAuthenticated\", \"true\")\n      router.push(\"/\")\n    }\n  }\n\n  const handleCreateAccount = (e: React.FormEvent) => {\n    e.preventDefault()\n    // Simulate account creation\n    if (formData.nome && formData.email) {\n      localStorage.setItem(\"isAuthenticated\", \"true\")\n      router.push(\"/\")\n    }\n  }\n\n  const formatCPF = (value: string) => {\n    return value\n      .replace(/\\D/g, \"\")\n      .replace(/(\\d{3})(\\d)/, \"$1.$2\")\n      .replace(/(\\d{3})(\\d)/, \"$1.$2\")\n      .replace(/(\\d{3})(\\d{1,2})/, \"$1-$2\")\n      .replace(/(-\\d{2})\\d+?$/, \"$1\")\n  }\n\n  const formatPhone = (value: string) => {\n    return value\n      .replace(/\\D/g, \"\")\n      .replace(/(\\d{2})(\\d)/, \"($1) $2\")\n      .replace(/(\\d{5})(\\d)/, \"$1-$2\")\n      .replace(/(-\\d{4})\\d+?$/, \"$1\")\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#0E0C28] flex items-center justify-center p-5 relative overflow-auto\">\n      <div\n        className=\"fixed inset-0 opacity-50 z-0\"\n        style={{\n          backgroundImage: \"url(/assets/wave-background.png)\",\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\",\n          filter: \"blur(11px)\",\n        }}\n      />\n\n      <div className=\"w-full max-w-md z-10 my-10\">\n        <div className=\"bg-[#1D1D41] rounded-2xl p-10 shadow-2xl\">\n          <div className=\"flex justify-center mb-8\">\n            <Image src=\"/assets/logo.png\" alt=\"Meu Assessor\" width={150} height={45} className=\"w-[150px]\" />\n          </div>\n\n          {/* Tabs */}\n          <div className=\"flex justify-center gap-2 mb-6\">\n            <button\n              onClick={() => setActiveTab(\"login\")}\n              className={`px-4 py-2 text-base font-bold transition-all border-b-2 ${\n                activeTab === \"login\" ? \"text-[#845BF6] border-[#845BF6]\" : \"text-[#AEABD8] border-transparent\"\n              }`}\n            >\n              Login\n            </button>\n            <button\n              onClick={() => setActiveTab(\"criar\")}\n              className={`px-4 py-2 text-base font-bold transition-all border-b-2 ${\n                activeTab === \"criar\" ? \"text-[#845BF6] border-[#845BF6]\" : \"text-[#AEABD8] border-transparent\"\n              }`}\n            >\n              Criar Conta\n            </button>\n          </div>\n\n          {/* Login Form */}\n          {activeTab === \"login\" && (\n            <form onSubmit={handleLogin} className=\"space-y-5\">\n              <div>\n                <label htmlFor=\"email\" className=\"block text-sm text-[#AEABD8] mb-1\">\n                  E-mail\n                </label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"e-mail\"\n                  className=\"w-full px-3 py-3 bg-[#141332] border border-[#2E2D55] rounded-lg text-white placeholder:text-[#7C8198] focus:outline-none focus:border-[#845BF6]\"\n                  required\n                />\n              </div>\n              <div>\n                <label htmlFor=\"password\" className=\"block text-sm text-[#AEABD8] mb-1\">\n                  Senha\n                </label>\n                <input\n                  type=\"password\"\n                  id=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"********\"\n                  className=\"w-full px-3 py-3 bg-[#141332] border border-[#2E2D55] rounded-lg text-white placeholder:text-[#7C8198] focus:outline-none focus:border-[#845BF6]\"\n                  required\n                />\n              </div>\n              <button\n                type=\"submit\"\n                className=\"w-full py-3 bg-[#845BF6] text-white font-semibold rounded-lg hover:bg-[#6a3fd9] transition-colors\"\n              >\n                Acessar\n              </button>\n              <a href=\"#\" className=\"block text-center text-sm text-[#7C8198] hover:underline mt-4\">\n                Esqueci a senha\n              </a>\n            </form>\n          )}\n\n          {/* Create Account Form */}\n          {activeTab === \"criar\" && (\n            <form onSubmit={handleCreateAccount} className=\"space-y-5\">\n              <div>\n                <label htmlFor=\"nome\" className=\"block text-sm text-[#AEABD8] mb-1\">\n                  Nome\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"nome\"\n                  value={formData.nome}\n                  onChange={(e) => setFormData({ ...formData, nome: e.target.value })}\n                  placeholder=\"Seu nome\"\n                  className=\"w-full px-3 py-3 bg-[#141332] border border-[#2E2D55] rounded-lg text-white placeholder:text-[#7C8198] focus:outline-none focus:border-[#845BF6]\"\n                  required\n                />\n              </div>\n              <div>\n                <label htmlFor=\"sobrenome\" className=\"block text-sm text-[#AEABD8] mb-1\">\n                  Sobrenome\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"sobrenome\"\n                  value={formData.sobrenome}\n                  onChange={(e) => setFormData({ ...formData, sobrenome: e.target.value })}\n                  placeholder=\"Seu sobrenome\"\n                  className=\"w-full px-3 py-3 bg-[#141332] border border-[#2E2D55] rounded-lg text-white placeholder:text-[#7C8198] focus:outline-none focus:border-[#845BF6]\"\n                  required\n                />\n              </div>\n              <div>\n                <label htmlFor=\"email-cadastro\" className=\"block text-sm text-[#AEABD8] mb-1\">\n                  Email\n                </label>\n                <input\n                  type=\"email\"\n                  id=\"email-cadastro\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  placeholder=\"Seu email\"\n                  className=\"w-full px-3 py-3 bg-[#141332] border border-[#2E2D55] rounded-lg text-white placeholder:text-[#7C8198] focus:outline-none focus:border-[#845BF6]\"\n                  required\n                />\n              </div>\n              <div>\n                <label htmlFor=\"cpf\" className=\"block text-sm text-[#AEABD8] mb-1\">\n                  CPF\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"cpf\"\n                  value={formData.cpf}\n                  onChange={(e) => setFormData({ ...formData, cpf: formatCPF(e.target.value) })}\n                  placeholder=\"000.000.000-00\"\n                  maxLength={14}\n                  className=\"w-full px-3 py-3 bg-[#141332] border border-[#2E2D55] rounded-lg text-white placeholder:text-[#7C8198] focus:outline-none focus:border-[#845BF6]\"\n                  required\n                />\n              </div>\n              <div>\n                <label htmlFor=\"telefone\" className=\"block text-sm text-[#AEABD8] mb-1\">\n                  Telefone\n                </label>\n                <input\n                  type=\"tel\"\n                  id=\"telefone\"\n                  value={formData.telefone}\n                  onChange={(e) => setFormData({ ...formData, telefone: formatPhone(e.target.value) })}\n                  placeholder=\"(00) 00000-0000\"\n                  className=\"w-full px-3 py-3 bg-[#141332] border border-[#2E2D55] rounded-lg text-white placeholder:text-[#7C8198] focus:outline-none focus:border-[#845BF6]\"\n                  required\n                />\n              </div>\n              <div>\n                <label htmlFor=\"nascimento\" className=\"block text-sm text-[#AEABD8] mb-1\">\n                  Data de Nascimento\n                </label>\n                <input\n                  type=\"date\"\n                  id=\"nascimento\"\n                  value={formData.nascimento}\n                  onChange={(e) => setFormData({ ...formData, nascimento: e.target.value })}\n                  className=\"w-full px-3 py-3 bg-[#141332] border border-[#2E2D55] rounded-lg text-white focus:outline-none focus:border-[#845BF6]\"\n                  required\n                />\n              </div>\n              <button\n                type=\"submit\"\n                className=\"w-full py-3 bg-[#845BF6] text-white font-semibold rounded-lg hover:bg-[#6a3fd9] transition-colors\"\n              >\n                Criar Conta\n              </button>\n            </form>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":9206},"lib/notifications.ts":{"content":"interface NotificationData {\n  type: \"trade_success\" | \"trade_failure\" | \"deposit\" | \"withdrawal\" | \"level_up\"\n  amount?: number\n  asset?: string\n  message?: string\n}\n\nexport function createNotification(data: NotificationData) {\n  const now = new Date()\n  const dateStr = now.toLocaleDateString(\"pt-BR\", {\n    day: \"2-digit\",\n    month: \"short\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  })\n\n  let message = \"\"\n\n  switch (data.type) {\n    case \"trade_success\":\n      message = `Trade bem-sucedido! Você ganhou R$${data.amount?.toFixed(2)} em ${data.asset}`\n      break\n    case \"trade_failure\":\n      message = `Trade encerrado com perda de R$${data.amount?.toFixed(2)} em ${data.asset}`\n      break\n    case \"deposit\":\n      message = `Depósito de R$${data.amount?.toFixed(2)} realizado com sucesso`\n      break\n    case \"withdrawal\":\n      message = `Saque de R$${data.amount?.toFixed(2)} processado com sucesso`\n      break\n    case \"level_up\":\n      message = data.message || \"Você subiu de nível! Parabéns, continue assim!\"\n      break\n  }\n\n  const notification = {\n    id: Date.now(),\n    date: dateStr,\n    message,\n    unread: true,\n    type: data.type,\n  }\n\n  // Dispatch custom event to notify the header component\n  const event = new CustomEvent(\"newNotification\", { detail: notification })\n  window.dispatchEvent(event)\n\n  return notification\n}\n\n// Example usage in your trade processing code:\n// import { createNotification } from '@/lib/notifications'\n//\n// After a successful trade:\n// createNotification({\n//   type: 'trade_success',\n//   amount: 150.50,\n//   asset: 'Bitcoin'\n// })\n//\n// After a failed trade:\n// createNotification({\n//   type: 'trade_failure',\n//   amount: 50.00,\n//   asset: 'Ethereum'\n// })\n//\n// After a deposit:\n// createNotification({\n//   type: 'deposit',\n//   amount: 500.00\n// })\n","size_bytes":1832},"components/ui/toast.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ToastPrimitives from '@radix-ui/react-toast'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { X } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',\n      className,\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',\n  {\n    variants: {\n      variant: {\n        default: 'border bg-background text-foreground',\n        destructive:\n          'destructive group border-destructive bg-destructive text-destructive-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',\n      className,\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',\n      className,\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn('text-sm font-semibold', className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn('text-sm opacity-90', className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4863},"components/ui/toaster.tsx":{"content":"'use client'\n\nimport { useToast } from '@/hooks/use-toast'\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from '@/components/ui/toast'\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":786},"components/ui/calendar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from 'lucide-react'\nimport { DayButton, DayPicker, getDefaultClassNames } from 'react-day-picker'\n\nimport { cn } from '@/lib/utils'\nimport { Button, buttonVariants } from '@/components/ui/button'\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = 'label',\n  buttonVariant = 'ghost',\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>['variant']\n}) {\n  const defaultClassNames = getDefaultClassNames()\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        'bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent',\n        String.raw`rtl:**:[.rdp-button\\_next>svg]:rotate-180`,\n        String.raw`rtl:**:[.rdp-button\\_previous>svg]:rotate-180`,\n        className,\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) =>\n          date.toLocaleString('default', { month: 'short' }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cn('w-fit', defaultClassNames.root),\n        months: cn(\n          'flex gap-4 flex-col md:flex-row relative',\n          defaultClassNames.months,\n        ),\n        month: cn('flex flex-col w-full gap-4', defaultClassNames.month),\n        nav: cn(\n          'flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between',\n          defaultClassNames.nav,\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: buttonVariant }),\n          'size-(--cell-size) aria-disabled:opacity-50 p-0 select-none',\n          defaultClassNames.button_previous,\n        ),\n        button_next: cn(\n          buttonVariants({ variant: buttonVariant }),\n          'size-(--cell-size) aria-disabled:opacity-50 p-0 select-none',\n          defaultClassNames.button_next,\n        ),\n        month_caption: cn(\n          'flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)',\n          defaultClassNames.month_caption,\n        ),\n        dropdowns: cn(\n          'w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5',\n          defaultClassNames.dropdowns,\n        ),\n        dropdown_root: cn(\n          'relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md',\n          defaultClassNames.dropdown_root,\n        ),\n        dropdown: cn(\n          'absolute bg-popover inset-0 opacity-0',\n          defaultClassNames.dropdown,\n        ),\n        caption_label: cn(\n          'select-none font-medium',\n          captionLayout === 'label'\n            ? 'text-sm'\n            : 'rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5',\n          defaultClassNames.caption_label,\n        ),\n        table: 'w-full border-collapse',\n        weekdays: cn('flex', defaultClassNames.weekdays),\n        weekday: cn(\n          'text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none',\n          defaultClassNames.weekday,\n        ),\n        week: cn('flex w-full mt-2', defaultClassNames.week),\n        week_number_header: cn(\n          'select-none w-(--cell-size)',\n          defaultClassNames.week_number_header,\n        ),\n        week_number: cn(\n          'text-[0.8rem] select-none text-muted-foreground',\n          defaultClassNames.week_number,\n        ),\n        day: cn(\n          'relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none',\n          defaultClassNames.day,\n        ),\n        range_start: cn(\n          'rounded-l-md bg-accent',\n          defaultClassNames.range_start,\n        ),\n        range_middle: cn('rounded-none', defaultClassNames.range_middle),\n        range_end: cn('rounded-r-md bg-accent', defaultClassNames.range_end),\n        today: cn(\n          'bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none',\n          defaultClassNames.today,\n        ),\n        outside: cn(\n          'text-muted-foreground aria-selected:text-muted-foreground',\n          defaultClassNames.outside,\n        ),\n        disabled: cn(\n          'text-muted-foreground opacity-50',\n          defaultClassNames.disabled,\n        ),\n        hidden: cn('invisible', defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          )\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === 'left') {\n            return (\n              <ChevronLeftIcon className={cn('size-4', className)} {...props} />\n            )\n          }\n\n          if (orientation === 'right') {\n            return (\n              <ChevronRightIcon\n                className={cn('size-4', className)}\n                {...props}\n              />\n            )\n          }\n\n          return (\n            <ChevronDownIcon className={cn('size-4', className)} {...props} />\n          )\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-(--cell-size) items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          )\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames()\n\n  const ref = React.useRef<HTMLButtonElement>(null)\n  React.useEffect(() => {\n    if (modifiers.focused) ref.current?.focus()\n  }, [modifiers.focused])\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        'data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70',\n        defaultClassNames.day,\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Calendar, CalendarDayButton }\n","size_bytes":7679},"lib/date-utils.ts":{"content":"export const getMonthAbbreviation = (monthName: string): string => {\n  const monthMap: Record<string, string> = {\n    Janeiro: \"jan\",\n    Fevereiro: \"fev\",\n    Março: \"mar\",\n    Abril: \"abr\",\n    Maio: \"mai\",\n    Junho: \"jun\",\n    Julho: \"jul\",\n    Agosto: \"ago\",\n    Setembro: \"set\",\n    Outubro: \"out\",\n    Novembro: \"nov\",\n    Dezembro: \"dez\",\n  }\n\n  return monthMap[monthName] || \"ago\"\n}\n","size_bytes":393},"components/ui/input-otp.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { OTPInput, OTPInputContext } from 'input-otp'\nimport { MinusIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction InputOTP({\n  className,\n  containerClassName,\n  ...props\n}: React.ComponentProps<typeof OTPInput> & {\n  containerClassName?: string\n}) {\n  return (\n    <OTPInput\n      data-slot=\"input-otp\"\n      containerClassName={cn(\n        'flex items-center gap-2 has-disabled:opacity-50',\n        containerClassName,\n      )}\n      className={cn('disabled:cursor-not-allowed', className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPGroup({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"input-otp-group\"\n      className={cn('flex items-center', className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPSlot({\n  index,\n  className,\n  ...props\n}: React.ComponentProps<'div'> & {\n  index: number\n}) {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}\n\n  return (\n    <div\n      data-slot=\"input-otp-slot\"\n      data-active={isActive}\n      className={cn(\n        'data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]',\n        className,\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"animate-caret-blink bg-foreground h-4 w-px duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n}\n\nfunction InputOTPSeparator({ ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div data-slot=\"input-otp-separator\" role=\"separator\" {...props}>\n      <MinusIcon />\n    </div>\n  )\n}\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2256},"components/ui/input.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Input({ className, type, ...props }: React.ComponentProps<'input'>) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\n        'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n","size_bytes":963},"pnpm-lock.yaml":{"content":"lockfileVersion: '9.0'\n\nsettings:\n  autoInstallPeers: true\n  excludeLinksFromLockfile: false","size_bytes":92},"components/ui/alert.tsx":{"content":"import * as React from 'react'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst alertVariants = cva(\n  'relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current',\n  {\n    variants: {\n      variant: {\n        default: 'bg-card text-card-foreground',\n        destructive:\n          'text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nfunction Alert({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<'div'> & VariantProps<typeof alertVariants>) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"alert-title\"\n      className={cn(\n        'col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDescription({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn(\n        'text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1617},"components/ui/spinner.tsx":{"content":"import { Loader2Icon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Spinner({ className, ...props }: React.ComponentProps<'svg'>) {\n  return (\n    <Loader2Icon\n      role=\"status\"\n      aria-label=\"Loading\"\n      className={cn('size-4 animate-spin', className)}\n      {...props}\n    />\n  )\n}\n\nexport { Spinner }\n","size_bytes":331},"lib/api.ts":{"content":"const API_BASE_URL = \"https://broker-api.mybroker.dev\"\n\nexport interface UserData {\n  id: string\n  tenantId: string\n  email: string\n  name: string\n  nickname: string\n  country: string\n  language: string\n  phone?: string\n  phoneCountryCode?: string\n  active: boolean\n  banned: boolean\n  emailVerified: boolean\n  lastLoginAt: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface Trade {\n  id: string\n  symbol: string\n  userId: string\n  amount: number\n  status: \"COMPLETED\" | \"CANCELLED\" | \"PENDING\" | \"OPEN\"\n  direction: \"BUY\" | \"SELL\"\n  pnl: number\n  result?: \"WON\" | \"LOST\" | \"PENDING\"\n  openPrice: number\n  closePrice: number\n  openTime: number\n  closeTime: number\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface TradesResponse {\n  currentPage: number\n  perPage: number\n  lastPage: number\n  nextPage: number | null\n  prevPage: number | null\n  pages: number\n  total: number\n  count: number\n  data: Trade[]\n}\n\nexport interface Wallet {\n  id: string\n  userId: string\n  balance: number\n  currency: string\n  createdAt: string\n}\n\nexport class MyBrokerAPI {\n  private apiToken: string\n\n  constructor(apiToken: string) {\n    this.apiToken = apiToken\n  }\n\n  private async request<T>(endpoint: string, options?: RequestInit): Promise<T> {\n    const url = `${API_BASE_URL}${endpoint}`\n\n    const timestamp = Math.floor(Date.now() / 1000).toString()\n\n    const headers: Record<string, string> = {\n      \"Content-Type\": \"application/json\",\n      \"api-token\": this.apiToken,\n      \"x-timestamp\": timestamp,\n      ...(options?.headers as Record<string, string>),\n    }\n\n    console.log(\"[v0] API Request:\", {\n      url,\n      method: options?.method || \"GET\",\n      headers: { ...headers, \"api-token\": \"***\" },\n    })\n\n    const response = await fetch(url, {\n      ...options,\n      headers,\n    })\n\n    if (!response.ok) {\n      const errorText = await response.text()\n      let errorMessage = `API Error: ${response.status}`\n\n      try {\n        const errorJson = JSON.parse(errorText)\n        errorMessage = errorJson.data?.message || errorJson.message || errorJson.error || errorMessage\n      } catch (e) {\n        errorMessage = errorText || errorMessage\n      }\n\n      console.error(\"[v0] API Error:\", { url, status: response.status, error: errorMessage })\n      throw new Error(errorMessage)\n    }\n\n    const data = await response.json()\n    console.log(\"[v0] API Response:\", { url, dataCount: Array.isArray(data?.data) ? data.data.length : \"N/A\" })\n    return data\n  }\n\n  async getUserInfo(): Promise<UserData> {\n    return this.request<UserData>(\"/token/users/me\")\n  }\n\n  async getTrades(page = 1, pageSize = 10): Promise<TradesResponse> {\n    return this.request<TradesResponse>(`/token/trades?page=${page}&pageSize=${pageSize}`)\n  }\n\n  async getTradeById(id: string): Promise<Trade> {\n    return this.request<Trade>(`/token/trades/${id}`)\n  }\n\n  async getWallets(): Promise<Wallet[]> {\n    return this.request<Wallet[]>(\"/token/wallets\")\n  }\n\n  async openTrade(data: {\n    isDemo: boolean\n    closeType: string\n    direction: \"BUY\" | \"SELL\"\n    symbol: string\n    amount: number\n  }): Promise<Trade> {\n    return this.request<Trade>(\"/token/trades/open\", {\n      method: \"POST\",\n      body: JSON.stringify(data),\n    })\n  }\n}\n\nexport function getApiToken(): string | null {\n  if (typeof window === \"undefined\") return null\n  const token = localStorage.getItem(\"apiToken\")\n  console.log(\"[v0] Getting API token:\", token ? \"Token found\" : \"No token found\")\n  return token\n}\n\nexport function setApiToken(token: string): void {\n  if (typeof window === \"undefined\") return\n  localStorage.setItem(\"apiToken\", token)\n}\n\nexport function removeApiToken(): void {\n  if (typeof window === \"undefined\") return\n  localStorage.removeItem(\"apiToken\")\n}\n\nexport function createApiClient(): MyBrokerAPI | null {\n  const token = getApiToken()\n  if (!token) {\n    console.error(\"[v0] Cannot create API client: No token found\")\n    return null\n  }\n  console.log(\"[v0] API client created successfully\")\n  return new MyBrokerAPI(token)\n}\n\nexport function formatCurrencyPair(symbol: string): string {\n  // Convert BTCUSDT to BTC/USD, ETHUSDT to ETH/USD, etc.\n  if (symbol.endsWith(\"USDT\")) {\n    const base = symbol.replace(\"USDT\", \"\")\n    return `${base}/USD`\n  }\n  return symbol\n}\n","size_bytes":4283},"components/ui/progress.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ProgressPrimitive from '@radix-ui/react-progress'\n\nimport { cn } from '@/lib/utils'\n\nfunction Progress({\n  className,\n  value,\n  ...props\n}: React.ComponentProps<typeof ProgressPrimitive.Root>) {\n  return (\n    <ProgressPrimitive.Root\n      data-slot=\"progress\"\n      className={cn(\n        'bg-primary/20 relative h-2 w-full overflow-hidden rounded-full',\n        className,\n      )}\n      {...props}\n    >\n      <ProgressPrimitive.Indicator\n        data-slot=\"progress-indicator\"\n        className=\"bg-primary h-full w-full flex-1 transition-all\"\n        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n      />\n    </ProgressPrimitive.Root>\n  )\n}\n\nexport { Progress }\n","size_bytes":741},"components/ui/scroll-area.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area'\n\nimport { cn } from '@/lib/utils'\n\nfunction ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn('relative', className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}\n\nfunction ScrollBar({\n  className,\n  orientation = 'vertical',\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        'flex touch-none p-px transition-colors select-none',\n        orientation === 'vertical' &&\n          'h-full w-2.5 border-l border-l-transparent',\n        orientation === 'horizontal' &&\n          'h-2.5 flex-col border-t border-t-transparent',\n        className,\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1646},"components/ui/breadcrumb.tsx":{"content":"import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { ChevronRight, MoreHorizontal } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Breadcrumb({ ...props }: React.ComponentProps<'nav'>) {\n  return <nav aria-label=\"breadcrumb\" data-slot=\"breadcrumb\" {...props} />\n}\n\nfunction BreadcrumbList({ className, ...props }: React.ComponentProps<'ol'>) {\n  return (\n    <ol\n      data-slot=\"breadcrumb-list\"\n      className={cn(\n        'text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbItem({ className, ...props }: React.ComponentProps<'li'>) {\n  return (\n    <li\n      data-slot=\"breadcrumb-item\"\n      className={cn('inline-flex items-center gap-1.5', className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbLink({\n  asChild,\n  className,\n  ...props\n}: React.ComponentProps<'a'> & {\n  asChild?: boolean\n}) {\n  const Comp = asChild ? Slot : 'a'\n\n  return (\n    <Comp\n      data-slot=\"breadcrumb-link\"\n      className={cn('hover:text-foreground transition-colors', className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbPage({ className, ...props }: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"breadcrumb-page\"\n      role=\"link\"\n      aria-disabled=\"true\"\n      aria-current=\"page\"\n      className={cn('text-foreground font-normal', className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbSeparator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<'li'>) {\n  return (\n    <li\n      data-slot=\"breadcrumb-separator\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn('[&>svg]:size-3.5', className)}\n      {...props}\n    >\n      {children ?? <ChevronRight />}\n    </li>\n  )\n}\n\nfunction BreadcrumbEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"breadcrumb-ellipsis\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn('flex size-9 items-center justify-center', className)}\n      {...props}\n    >\n      <MoreHorizontal className=\"size-4\" />\n      <span className=\"sr-only\">More</span>\n    </span>\n  )\n}\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2358},"components/theme-provider.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport {\n  ThemeProvider as NextThemesProvider,\n  type ThemeProviderProps,\n} from 'next-themes'\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n","size_bytes":292},"components/ui/input-group.tsx":{"content":"'use client'\n\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\n\nfunction InputGroup({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"input-group\"\n      role=\"group\"\n      className={cn(\n        'group/input-group border-input dark:bg-input/30 relative flex w-full items-center rounded-md border shadow-xs transition-[color,box-shadow] outline-none',\n        'h-9 has-[>textarea]:h-auto',\n\n        // Variants based on alignment.\n        'has-[>[data-align=inline-start]]:[&>input]:pl-2',\n        'has-[>[data-align=inline-end]]:[&>input]:pr-2',\n        'has-[>[data-align=block-start]]:h-auto has-[>[data-align=block-start]]:flex-col has-[>[data-align=block-start]]:[&>input]:pb-3',\n        'has-[>[data-align=block-end]]:h-auto has-[>[data-align=block-end]]:flex-col has-[>[data-align=block-end]]:[&>input]:pt-3',\n\n        // Focus state.\n        'has-[[data-slot=input-group-control]:focus-visible]:border-ring has-[[data-slot=input-group-control]:focus-visible]:ring-ring/50 has-[[data-slot=input-group-control]:focus-visible]:ring-[3px]',\n\n        // Error state.\n        'has-[[data-slot][aria-invalid=true]]:ring-destructive/20 has-[[data-slot][aria-invalid=true]]:border-destructive dark:has-[[data-slot][aria-invalid=true]]:ring-destructive/40',\n\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nconst inputGroupAddonVariants = cva(\n  \"text-muted-foreground flex h-auto cursor-text items-center justify-center gap-2 py-1.5 text-sm font-medium select-none [&>svg:not([class*='size-'])]:size-4 [&>kbd]:rounded-[calc(var(--radius)-5px)] group-data-[disabled=true]/input-group:opacity-50\",\n  {\n    variants: {\n      align: {\n        'inline-start':\n          'order-first pl-3 has-[>button]:ml-[-0.45rem] has-[>kbd]:ml-[-0.35rem]',\n        'inline-end':\n          'order-last pr-3 has-[>button]:mr-[-0.4rem] has-[>kbd]:mr-[-0.35rem]',\n        'block-start':\n          'order-first w-full justify-start px-3 pt-3 [.border-b]:pb-3 group-has-[>input]/input-group:pt-2.5',\n        'block-end':\n          'order-last w-full justify-start px-3 pb-3 [.border-t]:pt-3 group-has-[>input]/input-group:pb-2.5',\n      },\n    },\n    defaultVariants: {\n      align: 'inline-start',\n    },\n  },\n)\n\nfunction InputGroupAddon({\n  className,\n  align = 'inline-start',\n  ...props\n}: React.ComponentProps<'div'> & VariantProps<typeof inputGroupAddonVariants>) {\n  return (\n    <div\n      role=\"group\"\n      data-slot=\"input-group-addon\"\n      data-align={align}\n      className={cn(inputGroupAddonVariants({ align }), className)}\n      onClick={(e) => {\n        if ((e.target as HTMLElement).closest('button')) {\n          return\n        }\n        e.currentTarget.parentElement?.querySelector('input')?.focus()\n      }}\n      {...props}\n    />\n  )\n}\n\nconst inputGroupButtonVariants = cva(\n  'text-sm shadow-none flex gap-2 items-center',\n  {\n    variants: {\n      size: {\n        xs: \"h-6 gap-1 px-2 rounded-[calc(var(--radius)-5px)] [&>svg:not([class*='size-'])]:size-3.5 has-[>svg]:px-2\",\n        sm: 'h-8 px-2.5 gap-1.5 rounded-md has-[>svg]:px-2.5',\n        'icon-xs':\n          'size-6 rounded-[calc(var(--radius)-5px)] p-0 has-[>svg]:p-0',\n        'icon-sm': 'size-8 p-0 has-[>svg]:p-0',\n      },\n    },\n    defaultVariants: {\n      size: 'xs',\n    },\n  },\n)\n\nfunction InputGroupButton({\n  className,\n  type = 'button',\n  variant = 'ghost',\n  size = 'xs',\n  ...props\n}: Omit<React.ComponentProps<typeof Button>, 'size'> &\n  VariantProps<typeof inputGroupButtonVariants>) {\n  return (\n    <Button\n      type={type}\n      data-size={size}\n      variant={variant}\n      className={cn(inputGroupButtonVariants({ size }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputGroupText({ className, ...props }: React.ComponentProps<'span'>) {\n  return (\n    <span\n      className={cn(\n        \"text-muted-foreground flex items-center gap-2 text-sm [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction InputGroupInput({\n  className,\n  ...props\n}: React.ComponentProps<'input'>) {\n  return (\n    <Input\n      data-slot=\"input-group-control\"\n      className={cn(\n        'flex-1 rounded-none border-0 bg-transparent shadow-none focus-visible:ring-0 dark:bg-transparent',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction InputGroupTextarea({\n  className,\n  ...props\n}: React.ComponentProps<'textarea'>) {\n  return (\n    <Textarea\n      data-slot=\"input-group-control\"\n      className={cn(\n        'flex-1 resize-none rounded-none border-0 bg-transparent py-3 shadow-none focus-visible:ring-0 dark:bg-transparent',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  InputGroup,\n  InputGroupAddon,\n  InputGroupButton,\n  InputGroupText,\n  InputGroupInput,\n  InputGroupTextarea,\n}\n","size_bytes":5031},"components/ui/badge.tsx":{"content":"import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst badgeVariants = cva(\n  'inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden',\n  {\n    variants: {\n      variant: {\n        default:\n          'border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90',\n        secondary:\n          'border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90',\n        destructive:\n          'border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'span'> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'span'\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1632},"components/ui/context-menu.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ContextMenuPrimitive from '@radix-ui/react-context-menu'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction ContextMenu({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {\n  return <ContextMenuPrimitive.Root data-slot=\"context-menu\" {...props} />\n}\n\nfunction ContextMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {\n  return (\n    <ContextMenuPrimitive.Trigger data-slot=\"context-menu-trigger\" {...props} />\n  )\n}\n\nfunction ContextMenuGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {\n  return (\n    <ContextMenuPrimitive.Group data-slot=\"context-menu-group\" {...props} />\n  )\n}\n\nfunction ContextMenuPortal({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {\n  return (\n    <ContextMenuPrimitive.Portal data-slot=\"context-menu-portal\" {...props} />\n  )\n}\n\nfunction ContextMenuSub({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {\n  return <ContextMenuPrimitive.Sub data-slot=\"context-menu-sub\" {...props} />\n}\n\nfunction ContextMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {\n  return (\n    <ContextMenuPrimitive.RadioGroup\n      data-slot=\"context-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.SubTrigger\n      data-slot=\"context-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto\" />\n    </ContextMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction ContextMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {\n  return (\n    <ContextMenuPrimitive.SubContent\n      data-slot=\"context-menu-sub-content\"\n      className={cn(\n        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {\n  return (\n    <ContextMenuPrimitive.Portal>\n      <ContextMenuPrimitive.Content\n        data-slot=\"context-menu-content\"\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-context-menu-content-available-height) min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\n          className,\n        )}\n        {...props}\n      />\n    </ContextMenuPrimitive.Portal>\n  )\n}\n\nfunction ContextMenuItem({\n  className,\n  inset,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: 'default' | 'destructive'\n}) {\n  return (\n    <ContextMenuPrimitive.Item\n      data-slot=\"context-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {\n  return (\n    <ContextMenuPrimitive.CheckboxItem\n      data-slot=\"context-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction ContextMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {\n  return (\n    <ContextMenuPrimitive.RadioItem\n      data-slot=\"context-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.RadioItem>\n  )\n}\n\nfunction ContextMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.Label\n      data-slot=\"context-menu-label\"\n      data-inset={inset}\n      className={cn(\n        'text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {\n  return (\n    <ContextMenuPrimitive.Separator\n      data-slot=\"context-menu-separator\"\n      className={cn('bg-border -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"context-menu-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":8282},"components/ui/resizable.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { GripVerticalIcon } from 'lucide-react'\nimport * as ResizablePrimitive from 'react-resizable-panels'\n\nimport { cn } from '@/lib/utils'\n\nfunction ResizablePanelGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {\n  return (\n    <ResizablePrimitive.PanelGroup\n      data-slot=\"resizable-panel-group\"\n      className={cn(\n        'flex h-full w-full data-[panel-group-direction=vertical]:flex-col',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ResizablePanel({\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {\n  return <ResizablePrimitive.Panel data-slot=\"resizable-panel\" {...props} />\n}\n\nfunction ResizableHandle({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) {\n  return (\n    <ResizablePrimitive.PanelResizeHandle\n      data-slot=\"resizable-handle\"\n      className={cn(\n        'bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:translate-x-0 data-[panel-group-direction=vertical]:after:-translate-y-1/2 [&[data-panel-group-direction=vertical]>div]:rotate-90',\n        className,\n      )}\n      {...props}\n    >\n      {withHandle && (\n        <div className=\"bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border\">\n          <GripVerticalIcon className=\"size-2.5\" />\n        </div>\n      )}\n    </ResizablePrimitive.PanelResizeHandle>\n  )\n}\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":2030},"components/ui/use-toast.ts":{"content":"'use client'\n\n// Inspired by react-hot-toast library\nimport * as React from 'react'\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast'\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST']\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType['UPDATE_TOAST']\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType['DISMISS_TOAST']\n      toastId?: ToasterToast['id']\n    }\n  | {\n      type: ActionType['REMOVE_TOAST']\n      toastId?: ToasterToast['id']\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      }\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, 'id'>\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3945},"components/ui/empty.tsx":{"content":"import { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nfunction Empty({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"empty\"\n      className={cn(\n        'flex min-w-0 flex-1 flex-col items-center justify-center gap-6 rounded-lg border-dashed p-6 text-center text-balance md:p-12',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction EmptyHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"empty-header\"\n      className={cn(\n        'flex max-w-sm flex-col items-center gap-2 text-center',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nconst emptyMediaVariants = cva(\n  'flex shrink-0 items-center justify-center mb-2 [&_svg]:pointer-events-none [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        icon: \"bg-muted text-foreground flex size-10 shrink-0 items-center justify-center rounded-lg [&_svg:not([class*='size-'])]:size-6\",\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nfunction EmptyMedia({\n  className,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<'div'> & VariantProps<typeof emptyMediaVariants>) {\n  return (\n    <div\n      data-slot=\"empty-icon\"\n      data-variant={variant}\n      className={cn(emptyMediaVariants({ variant, className }))}\n      {...props}\n    />\n  )\n}\n\nfunction EmptyTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"empty-title\"\n      className={cn('text-lg font-medium tracking-tight', className)}\n      {...props}\n    />\n  )\n}\n\nfunction EmptyDescription({ className, ...props }: React.ComponentProps<'p'>) {\n  return (\n    <div\n      data-slot=\"empty-description\"\n      className={cn(\n        'text-muted-foreground [&>a:hover]:text-primary text-sm/relaxed [&>a]:underline [&>a]:underline-offset-4',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction EmptyContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"empty-content\"\n      className={cn(\n        'flex w-full max-w-sm min-w-0 flex-col items-center gap-4 text-sm text-balance',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Empty,\n  EmptyHeader,\n  EmptyTitle,\n  EmptyDescription,\n  EmptyContent,\n  EmptyMedia,\n}\n","size_bytes":2401},"components/ui/card.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Card({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        'bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        '@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-2 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn('leading-none font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        'col-start-2 row-span-2 row-start-1 self-start justify-self-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn('px-6', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn('flex items-center px-6 [.border-t]:pt-6', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1990},"components/ui/popover.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as PopoverPrimitive from '@radix-ui/react-popover'\n\nimport { cn } from '@/lib/utils'\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}\n\nfunction PopoverContent({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden',\n          className,\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1636},"components/operations-table.tsx":{"content":"\"use client\"\n\nimport { useEffect, useMemo, useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@/components/ui/pagination\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { createApiClient, formatCurrencyPair, type Trade } from \"@/lib/api\"\n\nexport type Operation = {\n  id: string\n  pair: string\n  date: string\n  time: string\n  contributionBRL: number\n  resultBRL: number\n}\n\ntype FilterType = \"all\" | \"positive\" | \"negative\"\n\nfunction formatBRL(value: number) {\n  return value.toLocaleString(\"pt-BR\", { style: \"currency\", currency: \"BRL\" })\n}\n\nfunction toCsv(operations: Operation[]): string {\n  const header = [\"Moedas\", \"Data\", \"Hora\", \"Aporte\", \"Resultado\"]\n  const rows = operations.map((op) => [\n    op.pair,\n    op.date,\n    op.time,\n    formatBRL(op.contributionBRL),\n    formatBRL(op.resultBRL),\n  ])\n  return [header, ...rows].map((r) => r.map((c) => `\"${String(c).replaceAll('\"', '\"\"')}\"`).join(\";\")).join(\"\\n\")\n}\n\nfunction tradeToOperation(trade: Trade): Operation {\n  const date = new Date(trade.openTime)\n  return {\n    id: trade.id,\n    pair: formatCurrencyPair(trade.symbol),\n    date: date.toLocaleDateString(\"pt-BR\"),\n    time: date.toLocaleTimeString(\"pt-BR\"),\n    contributionBRL: trade.amount,\n    resultBRL: trade.pnl,\n  }\n}\n\ninterface OperationsTableProps {\n  dateRange: { start: string; end: string }\n  selectedPeriod: \"week\" | \"month\" | \"today\"\n}\n\nexport function OperationsTable({ dateRange, selectedPeriod }: OperationsTableProps) {\n  const [filter, setFilter] = useState<FilterType>(\"all\")\n  const [operations, setOperations] = useState<Operation[]>([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [pageSize, setPageSize] = useState<number>(10)\n  const [currentPage, setCurrentPage] = useState<number>(1)\n\n  useEffect(() => {\n    const fetchOperations = async () => {\n      const apiClient = createApiClient()\n      if (!apiClient) {\n        setError(\"API token não configurado. Configure na página de perfil.\")\n        return\n      }\n\n      setIsLoading(true)\n      setError(null)\n      try {\n        const response = await apiClient.getTrades(1, 100)\n\n        const [startDay, startMonth, startYear] = dateRange.start.split(\"/\").map(Number)\n        const [endDay, endMonth, endYear] = dateRange.end.split(\"/\").map(Number)\n        const startDate = new Date(startYear, startMonth - 1, startDay)\n        const endDate = new Date(endYear, endMonth - 1, endDay, 23, 59, 59)\n\n        const filteredTrades = response.data.filter((trade) => {\n          const tradeDate = new Date(trade.openTime)\n          return tradeDate >= startDate && tradeDate <= endDate\n        })\n\n        const ops = filteredTrades.map(tradeToOperation)\n        setOperations(ops)\n        console.log(\"[v0] Fetched operations:\", ops.length, \"for period:\", dateRange)\n      } catch (err) {\n        console.error(\"[v0] Error fetching operations:\", err)\n        setError(err instanceof Error ? err.message : \"Erro ao carregar operações\")\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    fetchOperations()\n  }, [dateRange, selectedPeriod])\n\n  const filteredOperations = useMemo(() => {\n    if (filter === \"positive\") return operations.filter((o) => o.resultBRL > 0)\n    if (filter === \"negative\") return operations.filter((o) => o.resultBRL < 0)\n    return operations\n  }, [filter, operations])\n\n  const totalItems = filteredOperations.length\n  const totalPages = Math.max(1, Math.ceil(totalItems / pageSize))\n\n  useEffect(() => {\n    setCurrentPage((prev) => Math.min(prev, totalPages))\n  }, [totalPages])\n\n  const paginatedOperations = useMemo(() => {\n    const start = (currentPage - 1) * pageSize\n    return filteredOperations.slice(start, start + pageSize)\n  }, [filteredOperations, currentPage, pageSize])\n\n  function getPageItems(current: number, total: number): (number | \"...\")[] {\n    if (total <= 7) return Array.from({ length: total }, (_, i) => i + 1)\n    if (current <= 4) return [1, 2, 3, 4, 5, \"...\", total]\n    if (current >= total - 3) return [1, \"...\", total - 4, total - 3, total - 2, total - 1, total]\n    return [1, \"...\", current - 1, current, current + 1, \"...\", total]\n  }\n\n  const handleExport = () => {\n    const csv = toCsv(filteredOperations)\n    const blob = new Blob([\"\\uFEFF\" + csv], { type: \"text/csv;charset=utf-8;\" })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement(\"a\")\n    a.href = url\n    a.download = \"operacoes.csv\"\n    document.body.appendChild(a)\n    a.click()\n    a.remove()\n    URL.revokeObjectURL(url)\n  }\n\n  return (\n    <section className=\"mt-4\">\n      <div className=\"bg-[#1d1d41] border border-[rgba(174,171,216,0.25)] rounded-xl p-4 md:p-6\">\n        <div className=\"flex flex-col md:flex-row items-start md:items-center justify-between gap-4 mb-4\">\n          <div className=\"flex items-center gap-2 text-white\">\n            <h4 className=\"text-lg font-semibold\">Operações</h4>\n            <div className=\"flex items-center gap-2 bg-[#27264e] rounded-full p-1 border border-[rgba(174,171,216,0.25)]\">\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => setFilter(\"all\")}\n                className={`rounded-full px-3 py-1 text-xs ${filter === \"all\" ? \"bg-[#845bf6] text-white\" : \"text-[#aeabd8] hover:bg-[#845bf6]/20\"}`}\n              >\n                Todas\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => setFilter(\"positive\")}\n                className={`rounded-full px-3 py-1 text-xs ${filter === \"positive\" ? \"bg-[#845bf6] text-white\" : \"text-[#aeabd8] hover:bg-[#845bf6]/20\"}`}\n              >\n                + Lucrativas\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => setFilter(\"negative\")}\n                className={`rounded-full px-3 py-1 text-xs ${filter === \"negative\" ? \"bg-[#845bf6] text-white\" : \"text-[#aeabd8] hover:bg-[#845bf6]/20\"}`}\n              >\n                - Lucrativas\n              </Button>\n            </div>\n          </div>\n          <Button\n            onClick={handleExport}\n            className=\"bg-[#27264e] text-white border border-[rgba(174,171,216,0.35)] hover:bg-[#2f2e5a]\"\n          >\n            Exportar lista\n          </Button>\n        </div>\n\n        {isLoading && <div className=\"text-center py-8 text-[#aeabd8]\">Carregando operações...</div>}\n\n        {error && (\n          <div className=\"mb-4 p-3 bg-[#f2474a]/10 border border-[#f2474a]/30 rounded-lg text-[#f2474a] text-sm\">\n            {error}\n          </div>\n        )}\n\n        {!isLoading && !error && (\n          <>\n            <Table className=\"text-[#aeabd8]\">\n              <TableHeader>\n                <TableRow className=\"border-[#2a2959]\">\n                  <TableHead className=\"text-[#aeabd8]\">Moedas</TableHead>\n                  <TableHead className=\"text-[#aeabd8]\">Data</TableHead>\n                  <TableHead className=\"text-[#aeabd8]\">Hora</TableHead>\n                  <TableHead className=\"text-[#aeabd8]\">Aporte</TableHead>\n                  <TableHead className=\"text-[#aeabd8]\">Resultado</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {paginatedOperations.length === 0 ? (\n                  <TableRow className=\"border-[#2a2959]\">\n                    <TableCell colSpan={5} className=\"text-center py-8 text-[#aeabd8]\">\n                      Nenhuma operação encontrada\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  paginatedOperations.map((op) => {\n                    const isPositive = op.resultBRL >= 0\n                    return (\n                      <TableRow key={op.id} className=\"border-[#2a2959]\">\n                        <TableCell>\n                          <div className=\"flex items-center gap-2 text-white\">\n                            <span className=\"text-white font-medium\">{op.pair}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>{op.date}</TableCell>\n                        <TableCell>{op.time}</TableCell>\n                        <TableCell>{formatBRL(op.contributionBRL)}</TableCell>\n                        <TableCell>\n                          <div\n                            className={`inline-flex items-center gap-1 ${isPositive ? \"text-emerald-400\" : \"text-rose-400\"}`}\n                          >\n                            <svg\n                              width=\"12\"\n                              height=\"12\"\n                              viewBox=\"0 0 12 12\"\n                              fill=\"none\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              className={isPositive ? \"\" : \"rotate-180\"}\n                            >\n                              <path\n                                d=\"M6 10L6 2M6 2L2 6M6 2L10 6\"\n                                stroke=\"currentColor\"\n                                strokeWidth=\"2\"\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                              />\n                            </svg>\n                            <span>{formatBRL(Math.abs(op.resultBRL))}</span>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    )\n                  })\n                )}\n              </TableBody>\n            </Table>\n            <div className=\"flex flex-col sm:flex-row items-center justify-end gap-4 mt-4\">\n              <div className=\"flex items-center gap-2 text-[#aeabd8]\">\n                <span className=\"text-sm\">Itens por página</span>\n                <Select\n                  defaultValue={String(pageSize)}\n                  onValueChange={(v) => {\n                    const newSize = Number.parseInt(v, 10)\n                    setPageSize(newSize)\n                    setCurrentPage(1)\n                  }}\n                >\n                  <SelectTrigger\n                    size=\"sm\"\n                    className=\"min-w-[88px] bg-[#27264e] text-white border border-[rgba(174,171,216,0.35)]\"\n                  >\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-[#1d1d41] text-white border border-[rgba(174,171,216,0.35)]\">\n                    {[10, 20, 50].map((n) => (\n                      <SelectItem key={n} value={String(n)}>\n                        {n}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <Pagination className=\"justify-end\">\n                <PaginationContent>\n                  <PaginationItem>\n                    <PaginationPrevious\n                      onClick={(e) => {\n                        e.preventDefault()\n                        setCurrentPage((p) => Math.max(1, p - 1))\n                      }}\n                      className={currentPage === 1 ? \"pointer-events-none opacity-50\" : \"\"}\n                      href=\"#\"\n                    />\n                  </PaginationItem>\n                  {getPageItems(currentPage, totalPages).map((p, idx) => (\n                    <PaginationItem key={`${p}-${idx}`}>\n                      {p === \"...\" ? (\n                        <PaginationEllipsis />\n                      ) : (\n                        <PaginationLink\n                          isActive={p === currentPage}\n                          href=\"#\"\n                          onClick={(e) => {\n                            e.preventDefault()\n                            setCurrentPage(Number(p))\n                          }}\n                        >\n                          {p}\n                        </PaginationLink>\n                      )}\n                    </PaginationItem>\n                  ))}\n                  <PaginationItem>\n                    <PaginationNext\n                      onClick={(e) => {\n                        e.preventDefault()\n                        setCurrentPage((p) => Math.min(totalPages, p + 1))\n                      }}\n                      className={currentPage === totalPages ? \"pointer-events-none opacity-50\" : \"\"}\n                      href=\"#\"\n                    />\n                  </PaginationItem>\n                </PaginationContent>\n              </Pagination>\n            </div>\n          </>\n        )}\n      </div>\n    </section>\n  )\n}\n","size_bytes":12944},"components/ui/table.tsx":{"content":"'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Table({ className, ...props }: React.ComponentProps<'table'>) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn('w-full caption-bottom text-sm', className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<'thead'>) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn('[&_tr]:border-b', className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<'tbody'>) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn('[&_tr:last-child]:border-0', className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<'tfoot'>) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        'bg-muted/50 border-t font-medium [&>tr]:last:border-b-0',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<'tr'>) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        'hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<'th'>) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        'text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<'td'>) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        'p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<'caption'>) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn('text-muted-foreground mt-4 text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2452},"app/operacoes/page.tsx":{"content":"\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { Header } from \"@/components/header\"\nimport { Filters } from \"@/components/filters\"\nimport { OperationsTable } from \"@/components/operations-table\"\n\nexport default function OperacoesPage() {\n  const router = useRouter()\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\n  const [selectedPeriod, setSelectedPeriod] = useState<\"week\" | \"month\" | \"today\">(\"month\")\n  const [currentMonth, setCurrentMonth] = useState(() => {\n    const months = [\n      \"Janeiro\",\n      \"Fevereiro\",\n      \"Março\",\n      \"Abril\",\n      \"Maio\",\n      \"Junho\",\n      \"Julho\",\n      \"Agosto\",\n      \"Setembro\",\n      \"Outubro\",\n      \"Novembro\",\n      \"Dezembro\",\n    ]\n    return months[new Date().getMonth()]\n  })\n  const [dateRange, setDateRange] = useState(() => {\n    const now = new Date()\n    const year = now.getFullYear()\n    const month = now.getMonth() + 1\n    const lastDay = new Date(year, month, 0).getDate()\n    return {\n      start: `01/${month.toString().padStart(2, \"0\")}/${year}`,\n      end: `${lastDay}/${month.toString().padStart(2, \"0\")}/${year}`,\n    }\n  })\n\n  useEffect(() => {\n    const authStatus = localStorage.getItem(\"isAuthenticated\")\n    if (authStatus !== \"true\") {\n      router.push(\"/login\")\n    } else {\n      setIsAuthenticated(true)\n    }\n  }, [router])\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-[#141332] flex items-center justify-center\">\n        <div className=\"text-white\">Carregando...</div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#141332]\">\n      <Header />\n      <Filters\n        selectedPeriod={selectedPeriod}\n        onPeriodChange={setSelectedPeriod}\n        currentMonth={currentMonth}\n        onMonthChange={setCurrentMonth}\n        dateRange={dateRange}\n        onDateRangeChange={setDateRange}\n      />\n      <main className=\"pb-12\">\n        <div className=\"container mx-auto px-4 md:px-10 lg:px-[124px] max-w-[1920px]\">\n          <OperationsTable dateRange={dateRange} selectedPeriod={selectedPeriod} />\n        </div>\n      </main>\n    </div>\n  )\n}\n","size_bytes":2172},"components/ui/separator.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SeparatorPrimitive from '@radix-ui/react-separator'\n\nimport { cn } from '@/lib/utils'\n\nfunction Separator({\n  className,\n  orientation = 'horizontal',\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        'bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }\n","size_bytes":700},"components/ui/toggle-group.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group'\nimport { type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\nimport { toggleVariants } from '@/components/ui/toggle'\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: 'default',\n  variant: 'default',\n})\n\nfunction ToggleGroup({\n  className,\n  variant,\n  size,\n  children,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <ToggleGroupPrimitive.Root\n      data-slot=\"toggle-group\"\n      data-variant={variant}\n      data-size={size}\n      className={cn(\n        'group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs',\n        className,\n      )}\n      {...props}\n    >\n      <ToggleGroupContext.Provider value={{ variant, size }}>\n        {children}\n      </ToggleGroupContext.Provider>\n    </ToggleGroupPrimitive.Root>\n  )\n}\n\nfunction ToggleGroupItem({\n  className,\n  children,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &\n  VariantProps<typeof toggleVariants>) {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      data-slot=\"toggle-group-item\"\n      data-variant={context.variant || variant}\n      data-size={context.size || size}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        'min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n}\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1927},"components/ui/chart.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as RechartsPrimitive from 'recharts'\n\nimport { cn } from '@/lib/utils'\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error('useChart must be used within a <ChartContainer />')\n  }\n\n  return context\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<'div'> & {\n  config: ChartConfig\n  children: React.ComponentProps<\n    typeof RechartsPrimitive.ResponsiveContainer\n  >['children']\n}) {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color,\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join('\\n')}\n}\n`,\n          )\n          .join('\\n'),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = 'dot',\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<'div'> & {\n    hideLabel?: boolean\n    hideIndicator?: boolean\n    indicator?: 'line' | 'dot' | 'dashed'\n    nameKey?: string\n    labelKey?: string\n  }) {\n  const { config } = useChart()\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null\n    }\n\n    const [item] = payload\n    const key = `${labelKey || item?.dataKey || item?.name || 'value'}`\n    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n    const value =\n      !labelKey && typeof label === 'string'\n        ? config[label as keyof typeof config]?.label || label\n        : itemConfig?.label\n\n    if (labelFormatter) {\n      return (\n        <div className={cn('font-medium', labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>\n      )\n    }\n\n    if (!value) {\n      return null\n    }\n\n    return <div className={cn('font-medium', labelClassName)}>{value}</div>\n  }, [\n    label,\n    labelFormatter,\n    payload,\n    hideLabel,\n    labelClassName,\n    config,\n    labelKey,\n  ])\n\n  if (!active || !payload?.length) {\n    return null\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== 'dot'\n\n  return (\n    <div\n      className={cn(\n        'border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl',\n        className,\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || 'value'}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n          const indicatorColor = color || item.payload.fill || item.color\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                '[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5',\n                indicator === 'dot' && 'items-center',\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn(\n                          'shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)',\n                          {\n                            'h-2.5 w-2.5': indicator === 'dot',\n                            'w-1': indicator === 'line',\n                            'w-0 border-[1.5px] border-dashed bg-transparent':\n                              indicator === 'dashed',\n                            'my-0.5': nestLabel && indicator === 'dashed',\n                          },\n                        )}\n                        style={\n                          {\n                            '--color-bg': indicatorColor,\n                            '--color-border': indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn(\n                      'flex flex-1 justify-between leading-none',\n                      nestLabel ? 'items-end' : 'items-center',\n                    )}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">\n                        {itemConfig?.label || item.name}\n                      </span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = 'bottom',\n  nameKey,\n}: React.ComponentProps<'div'> &\n  Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\n    hideIcon?: boolean\n    nameKey?: string\n  }) {\n  const { config } = useChart()\n\n  if (!payload?.length) {\n    return null\n  }\n\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-center gap-4',\n        verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n        className,\n      )}\n    >\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || 'value'}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n        return (\n          <div\n            key={item.value}\n            className={\n              '[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3'\n            }\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string,\n) {\n  if (typeof payload !== 'object' || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    'payload' in payload &&\n    typeof payload.payload === 'object' &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === 'string'\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":9786},"components/projection-card.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Image from \"next/image\"\nimport { Card } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\n\ntype RiskProfile = \"conservative\" | \"moderate\" | \"aggressive\"\n\ninterface SavedProjection {\n  bankValue: number\n  selectedRisk: RiskProfile\n  projectionPeriod: \"day\" | \"month\"\n  selectedDay?: number\n  selectedPeriodStart?: number\n  selectedPeriodEnd?: number\n  investment: number\n  projection: number\n  savedAt: string\n}\n\nexport function ProjectionCard() {\n  const router = useRouter()\n  const [savedData, setSavedData] = useState<SavedProjection | null>(null)\n  const [period, setPeriod] = useState<\"day\" | \"month\">(\"day\")\n\n  useEffect(() => {\n    const loadSavedProjection = () => {\n      const savedProjection = localStorage.getItem(\"savedProjection\")\n      if (savedProjection) {\n        try {\n          const data: SavedProjection = JSON.parse(savedProjection)\n          setSavedData(data)\n          setPeriod(data.projectionPeriod)\n        } catch (error) {\n          console.error(\"[v0] Error loading saved projection:\", error)\n        }\n      }\n    }\n\n    loadSavedProjection()\n\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === \"savedProjection\") {\n        loadSavedProjection()\n      }\n    }\n\n    window.addEventListener(\"storage\", handleStorageChange)\n\n    const handleCustomUpdate = () => {\n      loadSavedProjection()\n    }\n    window.addEventListener(\"projectionUpdated\", handleCustomUpdate)\n\n    return () => {\n      window.removeEventListener(\"storage\", handleStorageChange)\n      window.removeEventListener(\"projectionUpdated\", handleCustomUpdate)\n    }\n  }, [])\n\n  const riskProfiles = {\n    conservative: { percent: 1, name: \"Conservador\" },\n    moderate: { percent: 3, name: \"Moderado\" },\n    aggressive: { percent: 5, name: \"Arrojado\" },\n  }\n\n  const getDisplayValues = () => {\n    if (!savedData) {\n      return {\n        percentage: 0,\n        projectedValue: 0,\n        investment: 0,\n        riskName: \"Conservador\",\n      }\n    }\n\n    const winRate = 0.87\n    const payout = 0.6\n\n    let projectedValue = savedData.investment * winRate * payout\n\n    if (period === \"month\") {\n      projectedValue = projectedValue * 22\n    }\n\n    const percentageGain = (projectedValue / savedData.bankValue) * 100\n\n    return {\n      percentage: percentageGain,\n      projectedValue: projectedValue,\n      investment: savedData.investment,\n      riskName: riskProfiles[savedData.selectedRisk].name,\n    }\n  }\n\n  const { percentage, projectedValue, investment, riskName } = getDisplayValues()\n\n  const radius = 70\n  const strokeWidth = 18\n  const circumference = Math.PI * radius // Semicircle length\n  const fillPercentage = Math.min(Math.max(percentage, 0), 100) / 100\n  const strokeDashoffset = circumference * (1 - fillPercentage)\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat(\"pt-BR\", {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 3,\n    }).format(value)\n  }\n\n  return (\n    <Card className=\"bg-[#1d1d41] border-none rounded-[20px] p-5 flex flex-col\">\n      <div className=\"flex justify-between items-center mb-5 flex-wrap gap-2\">\n        <h4 className=\"text-lg font-semibold text-white\">Projeção salva</h4>\n        {savedData && (\n          <div className=\"flex items-center border border-[rgba(174,171,216,0.53)] rounded-[50px] p-1\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => setPeriod(\"day\")}\n              className={`rounded-[50px] px-3.5 py-1.5 text-sm ${\n                period === \"day\" ? \"bg-[#845bf6] text-white\" : \"bg-transparent text-[#aeabd8]\"\n              }`}\n            >\n              Dia\n            </Button>\n            <Button\n              variant=\"ghost\"\n              onClick={() => setPeriod(\"month\")}\n              className={`rounded-[50px] px-3.5 py-1.5 text-sm ${\n                period === \"month\" ? \"bg-[#845bf6] text-white\" : \"bg-transparent text-[#aeabd8]\"\n              }`}\n            >\n              Mês\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {!savedData ? (\n        <div className=\"text-center py-12 text-[#aeabd8]\">\n          <p className=\"mb-2\">Nenhuma projeção salva</p>\n          <p className=\"text-sm\">Use a calculadora para criar uma projeção</p>\n        </div>\n      ) : (\n        <>\n          <div className=\"relative mx-auto w-[200px] h-[130px] my-3 flex flex-col items-center justify-start\">\n            <svg width=\"200\" height=\"130\" viewBox=\"0 0 200 130\" className=\"absolute top-0\">\n              {/* Background arc - dark shadow */}\n              <path\n                d=\"M 30 100 A 70 70 0 0 1 170 100\"\n                fill=\"none\"\n                stroke=\"rgba(39, 38, 78, 0.8)\"\n                strokeWidth={strokeWidth}\n                strokeLinecap=\"round\"\n              />\n              {/* Progress arc - fills from left to right based on percentage */}\n              <path\n                d=\"M 30 100 A 70 70 0 0 1 170 100\"\n                fill=\"none\"\n                stroke=\"#00ff88\"\n                strokeWidth={strokeWidth}\n                strokeLinecap=\"round\"\n                strokeDasharray={circumference}\n                strokeDashoffset={strokeDashoffset}\n                style={{\n                  transition: \"stroke-dashoffset 0.5s ease\",\n                  filter: \"drop-shadow(0 0 10px rgba(0, 255, 136, 0.5))\",\n                }}\n              />\n            </svg>\n\n            <div className=\"text-center mt-14 relative z-10\">\n              <p className=\"text-3xl font-bold text-white\">{percentage.toFixed(1)}%</p>\n              <p className=\"text-sm text-[#00ff88] mt-1\">R${formatCurrency(projectedValue)}</p>\n            </div>\n          </div>\n\n          <div className=\"flex justify-between items-end text-sm mt-6\">\n            <span className=\"text-[#f2474a] flex items-center gap-1\">\n              R$0\n              <Image src=\"/assets/ARROWDOWN.svg\" alt=\"Down\" width={12} height={12} />\n            </span>\n            <span className=\"text-white\">{riskName}</span>\n            <span className=\"text-[#00ff88] flex items-center gap-1\">\n              R${formatCurrency(investment)}\n              <Image src=\"/assets/arrow-up.svg\" alt=\"Up\" width={12} height={12} />\n            </span>\n          </div>\n        </>\n      )}\n\n      <Button\n        onClick={() => router.push(\"/operacoes\")}\n        variant=\"outline\"\n        className=\"w-full bg-transparent border border-[rgba(174,171,216,0.53)] text-[#aeabd8] rounded-[10px] py-2 text-sm hover:bg-[#27264e]/50 mt-4\"\n      >\n        Visualizar operações\n      </Button>\n    </Card>\n  )\n}\n","size_bytes":6705},"components/ui/radio-group.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as RadioGroupPrimitive from '@radix-ui/react-radio-group'\nimport { CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction RadioGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {\n  return (\n    <RadioGroupPrimitive.Root\n      data-slot=\"radio-group\"\n      className={cn('grid gap-3', className)}\n      {...props}\n    />\n  )\n}\n\nfunction RadioGroupItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {\n  return (\n    <RadioGroupPrimitive.Item\n      data-slot=\"radio-group-item\"\n      className={cn(\n        'border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator\n        data-slot=\"radio-group-indicator\"\n        className=\"relative flex items-center justify-center\"\n      >\n        <CircleIcon className=\"fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n}\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"components/ui/button-group.tsx":{"content":"import { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\nimport { Separator } from '@/components/ui/separator'\n\nconst buttonGroupVariants = cva(\n  \"flex w-fit items-stretch [&>*]:focus-visible:z-10 [&>*]:focus-visible:relative [&>[data-slot=select-trigger]:not([class*='w-'])]:w-fit [&>input]:flex-1 has-[select[aria-hidden=true]:last-child]:[&>[data-slot=select-trigger]:last-of-type]:rounded-r-md has-[>[data-slot=button-group]]:gap-2\",\n  {\n    variants: {\n      orientation: {\n        horizontal:\n          '[&>*:not(:first-child)]:rounded-l-none [&>*:not(:first-child)]:border-l-0 [&>*:not(:last-child)]:rounded-r-none',\n        vertical:\n          'flex-col [&>*:not(:first-child)]:rounded-t-none [&>*:not(:first-child)]:border-t-0 [&>*:not(:last-child)]:rounded-b-none',\n      },\n    },\n    defaultVariants: {\n      orientation: 'horizontal',\n    },\n  },\n)\n\nfunction ButtonGroup({\n  className,\n  orientation,\n  ...props\n}: React.ComponentProps<'div'> & VariantProps<typeof buttonGroupVariants>) {\n  return (\n    <div\n      role=\"group\"\n      data-slot=\"button-group\"\n      data-orientation={orientation}\n      className={cn(buttonGroupVariants({ orientation }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction ButtonGroupText({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'div'> & {\n  asChild?: boolean\n}) {\n  const Comp = asChild ? Slot : 'div'\n\n  return (\n    <Comp\n      className={cn(\n        \"bg-muted flex items-center gap-2 rounded-md border px-4 text-sm font-medium shadow-xs [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ButtonGroupSeparator({\n  className,\n  orientation = 'vertical',\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"button-group-separator\"\n      orientation={orientation}\n      className={cn(\n        'bg-input relative !m-0 self-stretch data-[orientation=vertical]:h-auto',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  ButtonGroup,\n  ButtonGroupSeparator,\n  ButtonGroupText,\n  buttonGroupVariants,\n}\n","size_bytes":2212},"app/page.tsx":{"content":"\"use client\"\n\nimport { useEffect } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { useState } from \"react\"\nimport { Header } from \"@/components/header\"\nimport { Filters } from \"@/components/filters\"\nimport { ResultCard } from \"@/components/result-card\"\nimport { CalculatorCard } from \"@/components/calculator-card\"\nimport { BalanceCard } from \"@/components/balance-card\"\nimport { TopOperationsCard } from \"@/components/top-operations-card\"\nimport { ProjectionCard } from \"@/components/projection-card\"\n\nexport default function DashboardPage() {\n  const router = useRouter()\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\n  const [selectedPeriod, setSelectedPeriod] = useState<\"week\" | \"month\" | \"today\">(\"month\")\n\n  const getCurrentMonth = () => {\n    const months = [\n      \"Janeiro\",\n      \"Fevereiro\",\n      \"Março\",\n      \"Abril\",\n      \"Maio\",\n      \"Junho\",\n      \"Julho\",\n      \"Agosto\",\n      \"Setembro\",\n      \"Outubro\",\n      \"Novembro\",\n      \"Dezembro\",\n    ]\n    return months[new Date().getMonth()]\n  }\n\n  const [currentMonth, setCurrentMonth] = useState(getCurrentMonth())\n\n  const getInitialDateRange = () => {\n    const now = new Date()\n    const year = now.getFullYear()\n    const month = now.getMonth()\n    const firstDay = new Date(year, month, 1)\n    const lastDay = new Date(year, month + 1, 0)\n\n    const formatDate = (date: Date) => {\n      const day = String(date.getDate()).padStart(2, \"0\")\n      const month = String(date.getMonth() + 1).padStart(2, \"0\")\n      return `${day}/${month}/${date.getFullYear()}`\n    }\n\n    return {\n      start: formatDate(firstDay),\n      end: formatDate(lastDay),\n    }\n  }\n\n  const [dateRange, setDateRange] = useState(getInitialDateRange())\n\n  useEffect(() => {\n    const authStatus = localStorage.getItem(\"isAuthenticated\")\n    const apiToken = localStorage.getItem(\"apiToken\")\n\n    if (authStatus !== \"true\") {\n      router.push(\"/login\")\n    } else {\n      setIsAuthenticated(true)\n    }\n  }, [router])\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-[#141332] flex items-center justify-center\">\n        <div className=\"text-white\">Carregando...</div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#141332]\">\n      <Header />\n      <Filters\n        selectedPeriod={selectedPeriod}\n        onPeriodChange={setSelectedPeriod}\n        currentMonth={currentMonth}\n        onMonthChange={setCurrentMonth}\n        dateRange={dateRange}\n        onDateRangeChange={setDateRange}\n      />\n      <main className=\"pb-12\">\n        <div className=\"container mx-auto px-4 md:px-10 lg:px-[124px] max-w-[1920px]\">\n          <div className=\"flex flex-col lg:flex-row lg:items-start gap-7\">\n            {/* Left Column */}\n            <div className=\"flex-1 flex flex-col gap-5\">\n              <ResultCard dateRange={dateRange} currentMonth={currentMonth} />\n              <CalculatorCard />\n            </div>\n            {/* Right Column */}\n            <div className=\"flex-[1.6] flex flex-col gap-6\">\n              <BalanceCard dateRange={dateRange} selectedPeriod={selectedPeriod} currentMonth={currentMonth} />\n              <div className=\"flex flex-col lg:flex-row lg:items-start gap-5\">\n                <div className=\"flex-[1.85]\">\n                  <TopOperationsCard dateRange={dateRange} currentMonth={currentMonth} />\n                </div>\n                <div className=\"flex-1\">\n                  <ProjectionCard />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  )\n}\n","size_bytes":3596},"components/ui/checkbox.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox'\nimport { CheckIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Checkbox({\n  className,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        'peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"flex items-center justify-center text-current transition-none\"\n      >\n        <CheckIcon className=\"size-3.5\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  )\n}\n\nexport { Checkbox }\n","size_bytes":1227},"components/ui/kbd.tsx":{"content":"import { cn } from '@/lib/utils'\n\nfunction Kbd({ className, ...props }: React.ComponentProps<'kbd'>) {\n  return (\n    <kbd\n      data-slot=\"kbd\"\n      className={cn(\n        'bg-muted w-fit text-muted-foreground pointer-events-none inline-flex h-5 min-w-5 items-center justify-center gap-1 rounded-sm px-1 font-sans text-xs font-medium select-none',\n        \"[&_svg:not([class*='size-'])]:size-3\",\n        '[[data-slot=tooltip-content]_&]:bg-background/20 [[data-slot=tooltip-content]_&]:text-background dark:[[data-slot=tooltip-content]_&]:bg-background/10',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction KbdGroup({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <kbd\n      data-slot=\"kbd-group\"\n      className={cn('inline-flex items-center gap-1', className)}\n      {...props}\n    />\n  )\n}\n\nexport { Kbd, KbdGroup }\n","size_bytes":863},"components/ui/collapsible.tsx":{"content":"'use client'\n\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible'\n\nfunction Collapsible({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {\n  return <CollapsiblePrimitive.Root data-slot=\"collapsible\" {...props} />\n}\n\nfunction CollapsibleTrigger({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleTrigger\n      data-slot=\"collapsible-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction CollapsibleContent({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleContent\n      data-slot=\"collapsible-content\"\n      {...props}\n    />\n  )\n}\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":800},"components/calculator-card.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect } from \"react\"\nimport Image from \"next/image\"\nimport { Card } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\n\ntype RiskProfile = \"conservative\" | \"moderate\" | \"aggressive\"\n\ninterface SavedProjection {\n  bankValue: number\n  selectedRisk: RiskProfile\n  projectionPeriod: \"day\" | \"month\"\n  selectedDay?: number\n  selectedPeriodStart?: number\n  selectedPeriodEnd?: number\n  investment: number\n  projection: number\n  savedAt: string\n}\n\nexport function CalculatorCard() {\n  const [bankValue, setBankValue] = useState(125)\n  const [inputValue, setInputValue] = useState(\"125,00\")\n  const [selectedRisk, setSelectedRisk] = useState<RiskProfile>(\"conservative\")\n  const [projectionPeriod, setProjectionPeriod] = useState<\"day\" | \"month\">(\"day\")\n  const [showCalendar, setShowCalendar] = useState(false)\n  const [showConfirmation, setShowConfirmation] = useState(false)\n  const [showSuccess, setShowSuccess] = useState(false)\n  const [selectedDay, setSelectedDay] = useState<number | null>(null)\n  const [selectedPeriodStart, setSelectedPeriodStart] = useState<number | null>(null)\n  const [selectedPeriodEnd, setSelectedPeriodEnd] = useState<number | null>(null)\n\n  useEffect(() => {\n    const savedProjection = localStorage.getItem(\"savedProjection\")\n    if (savedProjection) {\n      try {\n        const data: SavedProjection = JSON.parse(savedProjection)\n        setBankValue(data.bankValue)\n        setInputValue(formatCurrency(data.bankValue))\n        setSelectedRisk(data.selectedRisk)\n        setProjectionPeriod(data.projectionPeriod)\n        setSelectedDay(data.selectedDay || null)\n        setSelectedPeriodStart(data.selectedPeriodStart || null)\n        setSelectedPeriodEnd(data.selectedPeriodEnd || null)\n      } catch (error) {\n        console.error(\"[v0] Error loading saved projection:\", error)\n      }\n    }\n  }, [])\n\n  const riskProfiles = {\n    conservative: { percent: 1, name: \"Conservador\", icon: \"/assets/porco.png\" },\n    moderate: { percent: 3, name: \"Moderado\", icon: \"/assets/equilibrado.png\" },\n    aggressive: { percent: 5, name: \"Arrojado\", icon: \"/assets/foguet.png\" },\n  }\n\n  const calculateInvestment = () => {\n    return (bankValue * riskProfiles[selectedRisk].percent) / 100\n  }\n\n  const calculateProjection = () => {\n    const investment = calculateInvestment()\n    const winRate = 0.87\n    const payout = 0.6\n\n    if (projectionPeriod === \"day\") {\n      return investment * winRate * payout\n    } else {\n      const dailyReturn = investment * winRate * payout\n      return dailyReturn * 22\n    }\n  }\n\n  const handleClear = () => {\n    setBankValue(125)\n    setInputValue(\"125,00\")\n    setSelectedRisk(\"conservative\")\n    setProjectionPeriod(\"day\")\n    setSelectedDay(null)\n    setSelectedPeriodStart(null)\n    setSelectedPeriodEnd(null)\n    localStorage.removeItem(\"savedProjection\")\n  }\n\n  const handleSave = () => {\n    setShowCalendar(true)\n  }\n\n  const handleConfirmDate = () => {\n    if (\n      (projectionPeriod === \"day\" && selectedDay) ||\n      (projectionPeriod === \"month\" && selectedPeriodStart && selectedPeriodEnd)\n    ) {\n      setShowCalendar(false)\n      setShowConfirmation(true)\n    }\n  }\n\n  const handleConfirmOperation = () => {\n    const projectionData: SavedProjection = {\n      bankValue,\n      selectedRisk,\n      projectionPeriod,\n      selectedDay: selectedDay || undefined,\n      selectedPeriodStart: selectedPeriodStart || undefined,\n      selectedPeriodEnd: selectedPeriodEnd || undefined,\n      investment: calculateInvestment(),\n      projection: calculateProjection(),\n      savedAt: new Date().toISOString(),\n    }\n\n    localStorage.setItem(\"savedProjection\", JSON.stringify(projectionData))\n    window.dispatchEvent(new Event(\"projectionUpdated\"))\n    setShowConfirmation(false)\n    setShowSuccess(true)\n  }\n\n  const handleCloseSuccess = () => {\n    setShowSuccess(false)\n  }\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat(\"pt-BR\", {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(value)\n  }\n\n  const handleBankValueChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value\n    const cleanValue = value.replace(/[^\\d,]/g, \"\")\n    const parts = cleanValue.split(\",\")\n    const integerPart = parts[0] || \"0\"\n    const decimalPart = parts[1] || \"\"\n    const numericValue =\n      Number.parseInt(integerPart) + (decimalPart ? Number.parseInt(decimalPart.padEnd(2, \"0\").slice(0, 2)) / 100 : 0)\n    setBankValue(numericValue)\n    const formatted = formatCurrency(numericValue)\n    setInputValue(formatted)\n  }\n\n  const handleInputFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    e.target.select()\n  }\n\n  const getDaysInMonth = () => {\n    const year = 2025\n    const month = 7\n    const firstDay = new Date(year, month, 1).getDay()\n    const daysInMonth = new Date(year, month + 1, 0).getDate()\n    const days = []\n\n    for (let i = 0; i < firstDay; i++) {\n      days.push(null)\n    }\n    for (let i = 1; i <= daysInMonth; i++) {\n      days.push(i)\n    }\n    return days\n  }\n\n  const calendarDays = getDaysInMonth()\n  const dayLabels = [\"D\", \"S\", \"T\", \"Q\", \"Q\", \"S\", \"S\"]\n\n  return (\n    <>\n      <Card className=\"bg-[#1d1d41] border-none rounded-[20px] p-4 flex flex-col gap-3\">\n        <h4 className=\"text-base font-bold text-white\">Calculadora de projeção</h4>\n\n        <div>\n          <label className=\"block text-xs text-[#aeabd8] mb-1.5\">Qual valor da sua banca?</label>\n          <div className=\"flex items-center border border-[rgba(174,171,216,0.53)] rounded-[10px] px-2 py-1.5\">\n            <span className=\"text-[#aeabd8] mr-1.5\">R$</span>\n            <input\n              type=\"text\"\n              value={inputValue}\n              onChange={handleBankValueChange}\n              onFocus={handleInputFocus}\n              className=\"bg-transparent border-none text-white text-base font-bold w-full outline-none\"\n              placeholder=\"0,00\"\n            />\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <span className=\"bg-[rgba(2,177,90,0.15)] text-[#16c784] text-xs px-2 py-0.5 rounded-[50px]\">87%</span>\n          <p className=\"text-xs text-[#aeabd8] leading-tight\">\n            de assertividade e<br />\n            payout em média\n          </p>\n        </div>\n\n        <div>\n          <label className=\"block text-sm text-[#aeabd8] mb-2\">Qual valor que gostaria de aportar da sua banca?</label>\n          <div className=\"flex flex-col md:flex-row gap-1.5\">\n            {(Object.keys(riskProfiles) as RiskProfile[]).map((risk) => {\n              const profile = riskProfiles[risk]\n              const investment = (bankValue * profile.percent) / 100\n              return (\n                <button\n                  key={risk}\n                  onClick={() => setSelectedRisk(risk)}\n                  className={`flex-1 border rounded-[10px] p-2 text-center cursor-pointer transition-all ${\n                    selectedRisk === risk\n                      ? \"border-[#845bf6] shadow-[0px_0px_6.5px_0px_#845bf6] bg-[#27264e]\"\n                      : \"border-[rgba(174,171,216,0.53)] hover:border-[#845bf6]/50\"\n                  }`}\n                >\n                  <Image\n                    src={profile.icon || \"/placeholder.svg\"}\n                    alt={profile.name}\n                    width={32}\n                    height={32}\n                    className=\"mx-auto mb-2\"\n                  />\n                  <p className=\"text-[22px] font-semibold text-white mb-1\">{profile.percent}%</p>\n                  <p className=\"text-xs text-[#aeabd8] mb-1\">R${formatCurrency(investment)}</p>\n                  <p className=\"text-xs font-bold text-white\">{profile.name}</p>\n                </button>\n              )\n            })}\n          </div>\n        </div>\n\n        <div>\n          <label className=\"block text-xs text-[#aeabd8] mb-1\">Resultado da projeção</label>\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex items-center border border-[rgba(174,171,216,0.53)] rounded-[50px] p-1\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setProjectionPeriod(\"day\")}\n                className={`rounded-[50px] px-3 py-1.5 text-sm ${\n                  projectionPeriod === \"day\" ? \"bg-[#845bf6] text-white\" : \"bg-transparent text-[#aeabd8]\"\n                }`}\n              >\n                Dia\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={() => setProjectionPeriod(\"month\")}\n                className={`rounded-[50px] px-3 py-1.5 text-sm ${\n                  projectionPeriod === \"month\" ? \"bg-[#845bf6] text-white\" : \"bg-transparent text-[#aeabd8]\"\n                }`}\n              >\n                Mês\n              </Button>\n            </div>\n            <p className=\"text-[22px] font-semibold text-[#16c784] flex items-center gap-2\">\n              R$ {formatCurrency(calculateProjection())}\n              <Image src=\"/assets/setacima.svg\" alt=\"Up\" width={16} height={16} />\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex gap-3 mt-auto\">\n          <Button\n            onClick={handleSave}\n            className=\"flex-1 bg-[#27264e] text-white border-none rounded-[10px] py-1.5 text-sm font-medium hover:bg-[#2f2e5a]\"\n          >\n            Salvar\n          </Button>\n          <Button\n            onClick={handleClear}\n            variant=\"outline\"\n            className=\"flex-1 bg-transparent text-[#aeabd8] border border-[rgba(174,171,216,0.53)] rounded-[10px] py-1.5 text-sm hover:bg-[#27264e]/50\"\n          >\n            Limpar\n          </Button>\n        </div>\n      </Card>\n\n      {showCalendar && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n          <Card className=\"bg-[#1d1d41] border-none rounded-[20px] p-6 max-w-sm w-full\">\n            {projectionPeriod === \"day\" ? (\n              <>\n                <h3 className=\"text-lg font-bold text-white mb-4\">Agosto 2025</h3>\n                <div className=\"grid grid-cols-7 gap-2 mb-6\">\n                  {dayLabels.map((label, index) => (\n                    <div key={`day-label-${index}`} className=\"text-center text-xs text-[#aeabd8] font-semibold py-2\">\n                      {label}\n                    </div>\n                  ))}\n                  {calendarDays.map((day, index) => (\n                    <button\n                      key={`calendar-day-${index}`}\n                      onClick={() => day && setSelectedDay(day)}\n                      disabled={!day}\n                      className={`aspect-square rounded-lg text-sm font-medium transition-all ${\n                        day\n                          ? selectedDay === day\n                            ? \"bg-[#845bf6] text-white\"\n                            : \"bg-[#27264e] text-white hover:bg-[#845bf6]/50 cursor-pointer\"\n                          : \"text-[#aeabd8]/30 cursor-not-allowed\"\n                      }`}\n                    >\n                      {day}\n                    </button>\n                  ))}\n                </div>\n              </>\n            ) : (\n              <>\n                <h3 className=\"text-lg font-bold text-white mb-4\">Selecione o período</h3>\n                <div className=\"mb-6\">\n                  <p className=\"text-xs text-[#aeabd8] mb-3\">\n                    {selectedPeriodStart && selectedPeriodEnd\n                      ? `Período: ${selectedPeriodStart} a ${selectedPeriodEnd} de Agosto`\n                      : \"Clique para selecionar data inicial e final\"}\n                  </p>\n                  <div className=\"grid grid-cols-7 gap-2\">\n                    {dayLabels.map((label, index) => (\n                      <div\n                        key={`period-day-label-${index}`}\n                        className=\"text-center text-xs text-[#aeabd8] font-semibold py-2\"\n                      >\n                        {label}\n                      </div>\n                    ))}\n                    {calendarDays.map((day, index) => {\n                      const isStart = day === selectedPeriodStart\n                      const isEnd = day === selectedPeriodEnd\n                      const isBetween =\n                        day &&\n                        selectedPeriodStart &&\n                        selectedPeriodEnd &&\n                        day > selectedPeriodStart &&\n                        day < selectedPeriodEnd\n                      const isInRange = isStart || isEnd || isBetween\n\n                      return (\n                        <button\n                          key={`period-calendar-day-${index}`}\n                          onClick={() => {\n                            if (!day) return\n\n                            if (!selectedPeriodStart) {\n                              setSelectedPeriodStart(day)\n                            } else if (!selectedPeriodEnd) {\n                              if (day > selectedPeriodStart) {\n                                setSelectedPeriodEnd(day)\n                              } else {\n                                setSelectedPeriodStart(day)\n                                setSelectedPeriodEnd(null)\n                              }\n                            } else {\n                              setSelectedPeriodStart(day)\n                              setSelectedPeriodEnd(null)\n                            }\n                          }}\n                          disabled={!day}\n                          className={`aspect-square rounded-lg text-sm font-medium transition-all ${\n                            !day\n                              ? \"text-[#aeabd8]/30 cursor-not-allowed\"\n                              : isStart || isEnd\n                                ? \"bg-[#845bf6] text-white cursor-pointer\"\n                                : isBetween\n                                  ? \"bg-[#845bf6]/40 text-white cursor-pointer\"\n                                  : \"bg-[#27264e] text-white hover:bg-[#845bf6]/50 cursor-pointer\"\n                          }`}\n                        >\n                          {day}\n                        </button>\n                      )\n                    })}\n                  </div>\n                </div>\n              </>\n            )}\n\n            <div className=\"flex gap-3\">\n              <Button\n                onClick={() => {\n                  setShowCalendar(false)\n                  setSelectedDay(null)\n                  setSelectedPeriodStart(null)\n                  setSelectedPeriodEnd(null)\n                }}\n                variant=\"outline\"\n                className=\"flex-1 bg-transparent text-[#aeabd8] border border-[rgba(174,171,216,0.53)] rounded-[10px] py-2 text-sm hover:bg-[#27264e]/50\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                onClick={handleConfirmDate}\n                disabled={projectionPeriod === \"day\" ? !selectedDay : !selectedPeriodStart || !selectedPeriodEnd}\n                className=\"flex-1 bg-[#845bf6] text-white border-none rounded-[10px] py-2 text-sm font-medium hover:bg-[#6d47d4] disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                Confirmar\n              </Button>\n            </div>\n          </Card>\n        </div>\n      )}\n\n      {showConfirmation && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n          <Card className=\"bg-[#1d1d41] border-none rounded-[20px] p-6 max-w-sm w-full text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"w-16 h-16 rounded-full border-2 border-[#845bf6] flex items-center justify-center\">\n                <svg className=\"w-8 h-8 text-[#845bf6]\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                  />\n                </svg>\n              </div>\n            </div>\n\n            <h3 className=\"text-xl font-bold text-white mb-2\">Tem certeza?</h3>\n            <p className=\"text-sm text-[#aeabd8] mb-6\">\n              Caso já tenha saído uma projeção anteriormente irá ser substituída por essa.\n            </p>\n\n            <div className=\"flex gap-3\">\n              <Button\n                onClick={() => setShowConfirmation(false)}\n                variant=\"outline\"\n                className=\"flex-1 bg-transparent text-[#aeabd8] border border-[rgba(174,171,216,0.53)] rounded-[10px] py-2 text-sm hover:bg-[#27264e]/50\"\n              >\n                Voltar\n              </Button>\n              <Button\n                onClick={handleConfirmOperation}\n                className=\"flex-1 bg-[#845bf6] text-white border-none rounded-[10px] py-2 text-sm font-medium hover:bg-[#6d47d4]\"\n              >\n                Sim\n              </Button>\n            </div>\n          </Card>\n        </div>\n      )}\n\n      {showSuccess && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n          <Card className=\"bg-[#1d1d41] border-none rounded-[20px] p-6 max-w-sm w-full text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"w-16 h-16 rounded-full bg-[#16c784]/20 flex items-center justify-center\">\n                <svg className=\"w-8 h-8 text-[#16c784]\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                </svg>\n              </div>\n            </div>\n\n            <h3 className=\"text-xl font-bold text-white mb-6\">Salvo com sucesso!</h3>\n\n            <Button\n              onClick={handleCloseSuccess}\n              className=\"w-full bg-[#845bf6] text-white border-none rounded-[10px] py-2 text-sm font-medium hover:bg-[#6d47d4]\"\n            >\n              Concluir\n            </Button>\n          </Card>\n        </div>\n      )}\n    </>\n  )\n}\n","size_bytes":18349},"components/ui/tabs.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as TabsPrimitive from '@radix-ui/react-tabs'\n\nimport { cn } from '@/lib/utils'\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn('flex flex-col gap-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        'bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn('flex-1 outline-none', className)}\n      {...props}\n    />\n  )\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1971},"components/ui/alert-dialog.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog'\n\nimport { cn } from '@/lib/utils'\nimport { buttonVariants } from '@/components/ui/button'\n\nfunction AlertDialog({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {\n  return <AlertDialogPrimitive.Root data-slot=\"alert-dialog\" {...props} />\n}\n\nfunction AlertDialogTrigger({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {\n  return (\n    <AlertDialogPrimitive.Trigger data-slot=\"alert-dialog-trigger\" {...props} />\n  )\n}\n\nfunction AlertDialogPortal({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {\n  return (\n    <AlertDialogPrimitive.Portal data-slot=\"alert-dialog-portal\" {...props} />\n  )\n}\n\nfunction AlertDialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {\n  return (\n    <AlertDialogPrimitive.Overlay\n      data-slot=\"alert-dialog-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {\n  return (\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogPrimitive.Content\n        data-slot=\"alert-dialog-content\"\n        className={cn(\n          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg',\n          className,\n        )}\n        {...props}\n      />\n    </AlertDialogPortal>\n  )\n}\n\nfunction AlertDialogHeader({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"alert-dialog-header\"\n      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogFooter({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"alert-dialog-footer\"\n      className={cn(\n        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {\n  return (\n    <AlertDialogPrimitive.Title\n      data-slot=\"alert-dialog-title\"\n      className={cn('text-lg font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {\n  return (\n    <AlertDialogPrimitive.Description\n      data-slot=\"alert-dialog-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogAction({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {\n  return (\n    <AlertDialogPrimitive.Action\n      className={cn(buttonVariants(), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogCancel({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {\n  return (\n    <AlertDialogPrimitive.Cancel\n      className={cn(buttonVariants({ variant: 'outline' }), className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":3867},"components/ui/sidebar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, VariantProps } from 'class-variance-authority'\nimport { PanelLeftIcon } from 'lucide-react'\n\nimport { useIsMobile } from '@/hooks/use-mobile'\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Separator } from '@/components/ui/separator'\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from '@/components/ui/sheet'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip'\n\nconst SIDEBAR_COOKIE_NAME = 'sidebar_state'\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = '16rem'\nconst SIDEBAR_WIDTH_MOBILE = '18rem'\nconst SIDEBAR_WIDTH_ICON = '3rem'\nconst SIDEBAR_KEYBOARD_SHORTCUT = 'b'\n\ntype SidebarContextProps = {\n  state: 'expanded' | 'collapsed'\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error('useSidebar must be used within a SidebarProvider.')\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === 'function' ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open],\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyDown)\n    return () => window.removeEventListener('keydown', handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? 'expanded' : 'collapsed'\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              '--sidebar-width': SIDEBAR_WIDTH,\n              '--sidebar-width-icon': SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            'group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full',\n            className,\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = 'left',\n  variant = 'sidebar',\n  collapsible = 'offcanvas',\n  className,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & {\n  side?: 'left' | 'right'\n  variant?: 'sidebar' | 'floating' | 'inset'\n  collapsible?: 'offcanvas' | 'icon' | 'none'\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === 'none') {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          'bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden\"\n          style={\n            {\n              '--sidebar-width': SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === 'collapsed' ? collapsible : ''}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          'relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear',\n          'group-data-[collapsible=offcanvas]:w-0',\n          'group-data-[side=right]:rotate-180',\n          variant === 'floating' || variant === 'inset'\n            ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]'\n            : 'group-data-[collapsible=icon]:w-(--sidebar-width-icon)',\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          'fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex',\n          side === 'left'\n            ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'\n            : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',\n          // Adjust the padding for floating and inset variants.\n          variant === 'floating' || variant === 'inset'\n            ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]'\n            : 'group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l',\n          className,\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn('size-7', className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<'button'>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        'hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex',\n        'in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize',\n        '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',\n        'hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full',\n        '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',\n        '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<'main'>) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        'bg-background relative flex w-full flex-1 flex-col',\n        'md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn('bg-background h-8 w-full shadow-none', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn('flex flex-col gap-2 p-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn('flex flex-col gap-2 p-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn('bg-sidebar-border mx-2 w-auto', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn('relative flex w-full min-w-0 flex-col p-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'div'> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'div'\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        'text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        // Increases the hit area of the button on mobile.\n        'after:absolute after:-inset-2 md:after:hidden',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn('w-full text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<'ul'>) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn('flex w-full min-w-0 flex-col gap-1', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<'li'>) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn('group/menu-item relative', className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',\n        outline:\n          'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',\n      },\n      size: {\n        default: 'h-8 text-sm',\n        sm: 'h-7 text-xs',\n        lg: 'h-12 text-sm group-data-[collapsible=icon]:p-0!',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = 'default',\n  size = 'default',\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<'button'> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : 'button'\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === 'string') {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== 'collapsed' || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<'button'> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        // Increases the hit area of the button on mobile.\n        'after:absolute after:-inset-2 md:after:hidden',\n        'peer-data-[size=sm]/menu-button:top-1',\n        'peer-data-[size=default]/menu-button:top-1.5',\n        'peer-data-[size=lg]/menu-button:top-2.5',\n        'group-data-[collapsible=icon]:hidden',\n        showOnHover &&\n          'peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        'text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none',\n        'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',\n        'peer-data-[size=sm]/menu-button:top-1',\n        'peer-data-[size=default]/menu-button:top-1.5',\n        'peer-data-[size=lg]/menu-button:top-2.5',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<'div'> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn('flex h-8 items-center gap-2 rounded-md px-2', className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-(--skeleton-width) flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            '--skeleton-width': width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<'ul'>) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        'border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<'li'>) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn('group/menu-sub-item relative', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = 'md',\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<'a'> & {\n  asChild?: boolean\n  size?: 'sm' | 'md'\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : 'a'\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',\n        'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',\n        size === 'sm' && 'text-xs',\n        size === 'md' && 'text-sm',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21649},"hooks/use-toast.ts":{"content":"'use client'\n\n// Inspired by react-hot-toast library\nimport * as React from 'react'\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast'\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST']\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType['UPDATE_TOAST']\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType['DISMISS_TOAST']\n      toastId?: ToasterToast['id']\n    }\n  | {\n      type: ActionType['REMOVE_TOAST']\n      toastId?: ToasterToast['id']\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      }\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, 'id'>\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3945},"components/ui/item.tsx":{"content":"import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\nimport { Separator } from '@/components/ui/separator'\n\nfunction ItemGroup({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      role=\"list\"\n      data-slot=\"item-group\"\n      className={cn('group/item-group flex flex-col', className)}\n      {...props}\n    />\n  )\n}\n\nfunction ItemSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"item-separator\"\n      orientation=\"horizontal\"\n      className={cn('my-0', className)}\n      {...props}\n    />\n  )\n}\n\nconst itemVariants = cva(\n  'group/item flex items-center border border-transparent text-sm rounded-md transition-colors [a&]:hover:bg-accent/50 [a&]:transition-colors duration-100 flex-wrap outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        outline: 'border-border',\n        muted: 'bg-muted/50',\n      },\n      size: {\n        default: 'p-4 gap-4 ',\n        sm: 'py-3 px-4 gap-2.5',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nfunction Item({\n  className,\n  variant = 'default',\n  size = 'default',\n  asChild = false,\n  ...props\n}: React.ComponentProps<'div'> &\n  VariantProps<typeof itemVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'div'\n  return (\n    <Comp\n      data-slot=\"item\"\n      data-variant={variant}\n      data-size={size}\n      className={cn(itemVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nconst itemMediaVariants = cva(\n  'flex shrink-0 items-center justify-center gap-2 group-has-[[data-slot=item-description]]/item:self-start [&_svg]:pointer-events-none group-has-[[data-slot=item-description]]/item:translate-y-0.5',\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        icon: \"size-8 border rounded-sm bg-muted [&_svg:not([class*='size-'])]:size-4\",\n        image:\n          'size-10 rounded-sm overflow-hidden [&_img]:size-full [&_img]:object-cover',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nfunction ItemMedia({\n  className,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<'div'> & VariantProps<typeof itemMediaVariants>) {\n  return (\n    <div\n      data-slot=\"item-media\"\n      data-variant={variant}\n      className={cn(itemMediaVariants({ variant, className }))}\n      {...props}\n    />\n  )\n}\n\nfunction ItemContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"item-content\"\n      className={cn(\n        'flex flex-1 flex-col gap-1 [&+[data-slot=item-content]]:flex-none',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ItemTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"item-title\"\n      className={cn(\n        'flex w-fit items-center gap-2 text-sm leading-snug font-medium',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ItemDescription({ className, ...props }: React.ComponentProps<'p'>) {\n  return (\n    <p\n      data-slot=\"item-description\"\n      className={cn(\n        'text-muted-foreground line-clamp-2 text-sm leading-normal font-normal text-balance',\n        '[&>a:hover]:text-primary [&>a]:underline [&>a]:underline-offset-4',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ItemActions({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"item-actions\"\n      className={cn('flex items-center gap-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction ItemHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"item-header\"\n      className={cn(\n        'flex basis-full items-center justify-between gap-2',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ItemFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"item-footer\"\n      className={cn(\n        'flex basis-full items-center justify-between gap-2',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Item,\n  ItemMedia,\n  ItemContent,\n  ItemActions,\n  ItemGroup,\n  ItemSeparator,\n  ItemTitle,\n  ItemDescription,\n  ItemHeader,\n  ItemFooter,\n}\n","size_bytes":4503},"app/globals.css":{"content":"@import \"tailwindcss\";\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(0.08 0.02 270);\n  --foreground: oklch(1 0 0);\n  --card: oklch(0.12 0.03 270);\n  --card-foreground: oklch(1 0 0);\n  --popover: oklch(0.12 0.03 270);\n  --popover-foreground: oklch(1 0 0);\n  --primary: oklch(0.58 0.18 280);\n  --primary-foreground: oklch(1 0 0);\n  --secondary: oklch(0.16 0.03 270);\n  --secondary-foreground: oklch(1 0 0);\n  --muted: oklch(0.16 0.03 270);\n  --muted-foreground: oklch(0.68 0.05 270);\n  --accent: oklch(0.58 0.18 280);\n  --accent-foreground: oklch(1 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(1 0 0);\n  --border: oklch(0.68 0.05 270 / 0.53);\n  --input: oklch(0.68 0.05 270 / 0.53);\n  --ring: oklch(0.58 0.18 280);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.145 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.145 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.985 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.637 0.237 25.331);\n  --border: oklch(0.269 0 0);\n  --input: oklch(0.269 0 0);\n  --ring: oklch(0.439 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --font-sans: var(--font-roboto), \"Roboto\", sans-serif;\n  --font-public-sans: var(--font-public-sans), \"Public Sans\", sans-serif;\n  --font-poppins: var(--font-poppins), \"Poppins\", sans-serif;\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n\n/* Util classes para pontos nos gráficos — desativadas por padrão */\n@keyframes blinkFade {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.25; }\n}\n\n@keyframes pulseRing {\n  0% { transform: scale(1); opacity: 0.45; }\n  70% { transform: scale(1.9); opacity: 0; }\n  100% { transform: scale(1.9); opacity: 0; }\n}\n\n/* Removemos a animação para evitar o \"ponto piscante\" */\n.blink-point { animation: none !important; }\n.blink-ring { animation: none !important; }\n","size_bytes":4951},"components/ui/hover-card.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as HoverCardPrimitive from '@radix-ui/react-hover-card'\n\nimport { cn } from '@/lib/utils'\n\nfunction HoverCard({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Root>) {\n  return <HoverCardPrimitive.Root data-slot=\"hover-card\" {...props} />\n}\n\nfunction HoverCardTrigger({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {\n  return (\n    <HoverCardPrimitive.Trigger data-slot=\"hover-card-trigger\" {...props} />\n  )\n}\n\nfunction HoverCardContent({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {\n  return (\n    <HoverCardPrimitive.Portal data-slot=\"hover-card-portal\">\n      <HoverCardPrimitive.Content\n        data-slot=\"hover-card-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-64 origin-(--radix-hover-card-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden',\n          className,\n        )}\n        {...props}\n      />\n    </HoverCardPrimitive.Portal>\n  )\n}\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1533},"components/ui/select.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SelectPrimitive from '@radix-ui/react-select'\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = 'default',\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: 'sm' | 'default'\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = 'popper',\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md',\n          position === 'popper' &&\n            'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\n          className,\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            'p-1',\n            position === 'popper' &&\n              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1',\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn('text-muted-foreground px-2 py-1.5 text-xs', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn('bg-border pointer-events-none -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        'flex cursor-default items-center justify-center py-1',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        'flex cursor-default items-center justify-center py-1',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n","size_bytes":6259},"components/ui/navigation-menu.tsx":{"content":"import * as React from 'react'\nimport * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu'\nimport { cva } from 'class-variance-authority'\nimport { ChevronDownIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction NavigationMenu({\n  className,\n  children,\n  viewport = true,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {\n  viewport?: boolean\n}) {\n  return (\n    <NavigationMenuPrimitive.Root\n      data-slot=\"navigation-menu\"\n      data-viewport={viewport}\n      className={cn(\n        'group/navigation-menu relative flex max-w-max flex-1 items-center justify-center',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      {viewport && <NavigationMenuViewport />}\n    </NavigationMenuPrimitive.Root>\n  )\n}\n\nfunction NavigationMenuList({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {\n  return (\n    <NavigationMenuPrimitive.List\n      data-slot=\"navigation-menu-list\"\n      className={cn(\n        'group flex flex-1 list-none items-center justify-center gap-1',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {\n  return (\n    <NavigationMenuPrimitive.Item\n      data-slot=\"navigation-menu-item\"\n      className={cn('relative', className)}\n      {...props}\n    />\n  )\n}\n\nconst navigationMenuTriggerStyle = cva(\n  'group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1',\n)\n\nfunction NavigationMenuTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {\n  return (\n    <NavigationMenuPrimitive.Trigger\n      data-slot=\"navigation-menu-trigger\"\n      className={cn(navigationMenuTriggerStyle(), 'group', className)}\n      {...props}\n    >\n      {children}{' '}\n      <ChevronDownIcon\n        className=\"relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180\"\n        aria-hidden=\"true\"\n      />\n    </NavigationMenuPrimitive.Trigger>\n  )\n}\n\nfunction NavigationMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {\n  return (\n    <NavigationMenuPrimitive.Content\n      data-slot=\"navigation-menu-content\"\n      className={cn(\n        'data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto',\n        'group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuViewport({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {\n  return (\n    <div\n      className={'absolute top-full left-0 isolate z-50 flex justify-center'}\n    >\n      <NavigationMenuPrimitive.Viewport\n        data-slot=\"navigation-menu-viewport\"\n        className={cn(\n          'origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]',\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction NavigationMenuLink({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {\n  return (\n    <NavigationMenuPrimitive.Link\n      data-slot=\"navigation-menu-link\"\n      className={cn(\n        \"data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuIndicator({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {\n  return (\n    <NavigationMenuPrimitive.Indicator\n      data-slot=\"navigation-menu-indicator\"\n      className={cn(\n        'data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden',\n        className,\n      )}\n      {...props}\n    >\n      <div className=\"bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md\" />\n    </NavigationMenuPrimitive.Indicator>\n  )\n}\n\nexport {\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n  navigationMenuTriggerStyle,\n}\n","size_bytes":6651},"components/ui/menubar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as MenubarPrimitive from '@radix-ui/react-menubar'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Menubar({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Root>) {\n  return (\n    <MenubarPrimitive.Root\n      data-slot=\"menubar\"\n      className={cn(\n        'bg-background flex h-9 items-center gap-1 rounded-md border p-1 shadow-xs',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu data-slot=\"menubar-menu\" {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group data-slot=\"menubar-group\" {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal data-slot=\"menubar-portal\" {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return (\n    <MenubarPrimitive.RadioGroup data-slot=\"menubar-radio-group\" {...props} />\n  )\n}\n\nfunction MenubarTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Trigger>) {\n  return (\n    <MenubarPrimitive.Trigger\n      data-slot=\"menubar-trigger\"\n      className={cn(\n        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex items-center rounded-sm px-2 py-1 text-sm font-medium outline-hidden select-none',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarContent({\n  className,\n  align = 'start',\n  alignOffset = -4,\n  sideOffset = 8,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Content>) {\n  return (\n    <MenubarPortal>\n      <MenubarPrimitive.Content\n        data-slot=\"menubar-content\"\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[12rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-md',\n          className,\n        )}\n        {...props}\n      />\n    </MenubarPortal>\n  )\n}\n\nfunction MenubarItem({\n  className,\n  inset,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Item> & {\n  inset?: boolean\n  variant?: 'default' | 'destructive'\n}) {\n  return (\n    <MenubarPrimitive.Item\n      data-slot=\"menubar-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.CheckboxItem>) {\n  return (\n    <MenubarPrimitive.CheckboxItem\n      data-slot=\"menubar-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.CheckboxItem>\n  )\n}\n\nfunction MenubarRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioItem>) {\n  return (\n    <MenubarPrimitive.RadioItem\n      data-slot=\"menubar-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.RadioItem>\n  )\n}\n\nfunction MenubarLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <MenubarPrimitive.Label\n      data-slot=\"menubar-label\"\n      data-inset={inset}\n      className={cn(\n        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Separator>) {\n  return (\n    <MenubarPrimitive.Separator\n      data-slot=\"menubar-separator\"\n      className={cn('bg-border -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"menubar-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nfunction MenubarSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <MenubarPrimitive.SubTrigger\n      data-slot=\"menubar-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-none select-none data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto h-4 w-4\" />\n    </MenubarPrimitive.SubTrigger>\n  )\n}\n\nfunction MenubarSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.SubContent>) {\n  return (\n    <MenubarPrimitive.SubContent\n      data-slot=\"menubar-sub-content\"\n      className={cn(\n        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Menubar,\n  MenubarPortal,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarGroup,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarItem,\n  MenubarShortcut,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSub,\n  MenubarSubTrigger,\n  MenubarSubContent,\n}\n","size_bytes":8404},"app/layout.tsx":{"content":"import type React from \"react\"\nimport type { Metadata } from \"next\"\nimport { Roboto, Public_Sans, Poppins } from \"next/font/google\"\nimport { Analytics } from \"@vercel/analytics/next\"\nimport \"./globals.css\"\n\nconst roboto = Roboto({\n  subsets: [\"latin\"],\n  weight: [\"400\", \"500\", \"600\", \"700\"],\n  variable: \"--font-roboto\",\n})\n\nconst publicSans = Public_Sans({\n  subsets: [\"latin\"],\n  weight: [\"800\"],\n  variable: \"--font-public-sans\",\n})\n\nconst poppins = Poppins({\n  subsets: [\"latin\"],\n  weight: [\"400\", \"700\"],\n  variable: \"--font-poppins\",\n})\n\nexport const metadata: Metadata = {\n  title: \"Dashboard Meu Assessor\",\n  description: \"Dashboard de investimentos e operações\",\n  generator: \"v0.app\",\n}\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang=\"pt-BR\">\n      <body className={`${roboto.variable} ${publicSans.variable} ${poppins.variable} font-sans antialiased`}>\n        {children}\n        <Analytics />\n      </body>\n    </html>\n  )\n}\n","size_bytes":1018},"lib/utils.ts":{"content":"import { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"styles/globals.css":{"content":"@import 'tailwindcss';\n@import 'tw-animate-css';\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.145 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.145 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.985 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.637 0.237 25.331);\n  --border: oklch(0.269 0 0);\n  --input: oklch(0.269 0 0);\n  --ring: oklch(0.439 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --font-sans: 'Geist', 'Geist Fallback';\n  --font-mono: 'Geist Mono', 'Geist Mono Fallback';\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":4353},"components/ui/use-mobile.tsx":{"content":"import * as React from 'react'\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener('change', onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener('change', onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565}},"version":2}